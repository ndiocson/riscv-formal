
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Xenia Wolf <claire@yosyshq.com>         |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.12+54 (git sha1 59a715034, clang 10.0.0-4ubuntu1 -fPIC -Os)


-- Executing script file `../model/design_nomem.ys' --

1. Executing Verilog-2005 frontend: rvfi_macros.vh
Parsing SystemVerilog input from `rvfi_macros.vh' to AST representation.
Successfully finished Verilog frontend.

2. Executing Verilog-2005 frontend: myRiscv.sv
Parsing SystemVerilog input from `myRiscv.sv' to AST representation.
Generating RTLIL representation for module `\myRiscv'.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:355.25-355.49.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:356.25-356.49.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:357.25-357.49.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:358.25-358.49.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:359.25-359.49.
Warning: wire '\rvfi_mem_rmask' is assigned in a block at myRiscv.sv:360.25-360.49.
Successfully finished Verilog frontend.

3. Executing Verilog-2005 frontend: insn_add.v
Parsing SystemVerilog input from `insn_add.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_add'.
Successfully finished Verilog frontend.

4. Executing Verilog-2005 frontend: insn_addi.v
Parsing SystemVerilog input from `insn_addi.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_addi'.
Successfully finished Verilog frontend.

5. Executing Verilog-2005 frontend: insn_and.v
Parsing SystemVerilog input from `insn_and.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_and'.
Successfully finished Verilog frontend.

6. Executing Verilog-2005 frontend: insn_andi.v
Parsing SystemVerilog input from `insn_andi.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_andi'.
Successfully finished Verilog frontend.

7. Executing Verilog-2005 frontend: insn_auipc.v
Parsing SystemVerilog input from `insn_auipc.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_auipc'.
Successfully finished Verilog frontend.

8. Executing Verilog-2005 frontend: insn_beq.v
Parsing SystemVerilog input from `insn_beq.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_beq'.
Successfully finished Verilog frontend.

9. Executing Verilog-2005 frontend: insn_bge.v
Parsing SystemVerilog input from `insn_bge.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_bge'.
Successfully finished Verilog frontend.

10. Executing Verilog-2005 frontend: insn_bgeu.v
Parsing SystemVerilog input from `insn_bgeu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_bgeu'.
Successfully finished Verilog frontend.

11. Executing Verilog-2005 frontend: insn_blt.v
Parsing SystemVerilog input from `insn_blt.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_blt'.
Successfully finished Verilog frontend.

12. Executing Verilog-2005 frontend: insn_bltu.v
Parsing SystemVerilog input from `insn_bltu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_bltu'.
Successfully finished Verilog frontend.

13. Executing Verilog-2005 frontend: insn_bne.v
Parsing SystemVerilog input from `insn_bne.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_bne'.
Successfully finished Verilog frontend.

14. Executing Verilog-2005 frontend: insn_c_add.v
Parsing SystemVerilog input from `insn_c_add.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_add'.
Successfully finished Verilog frontend.

15. Executing Verilog-2005 frontend: insn_c_addi.v
Parsing SystemVerilog input from `insn_c_addi.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_addi'.
Successfully finished Verilog frontend.

16. Executing Verilog-2005 frontend: insn_c_addi16sp.v
Parsing SystemVerilog input from `insn_c_addi16sp.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_addi16sp'.
Successfully finished Verilog frontend.

17. Executing Verilog-2005 frontend: insn_c_addi4spn.v
Parsing SystemVerilog input from `insn_c_addi4spn.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_addi4spn'.
Successfully finished Verilog frontend.

18. Executing Verilog-2005 frontend: insn_c_and.v
Parsing SystemVerilog input from `insn_c_and.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_and'.
Successfully finished Verilog frontend.

19. Executing Verilog-2005 frontend: insn_c_andi.v
Parsing SystemVerilog input from `insn_c_andi.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_andi'.
Successfully finished Verilog frontend.

20. Executing Verilog-2005 frontend: insn_c_beqz.v
Parsing SystemVerilog input from `insn_c_beqz.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_beqz'.
Successfully finished Verilog frontend.

21. Executing Verilog-2005 frontend: insn_c_bnez.v
Parsing SystemVerilog input from `insn_c_bnez.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_bnez'.
Successfully finished Verilog frontend.

22. Executing Verilog-2005 frontend: insn_c_j.v
Parsing SystemVerilog input from `insn_c_j.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_j'.
Successfully finished Verilog frontend.

23. Executing Verilog-2005 frontend: insn_c_jal.v
Parsing SystemVerilog input from `insn_c_jal.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_jal'.
Successfully finished Verilog frontend.

24. Executing Verilog-2005 frontend: insn_c_jalr.v
Parsing SystemVerilog input from `insn_c_jalr.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_jalr'.
Successfully finished Verilog frontend.

25. Executing Verilog-2005 frontend: insn_c_jr.v
Parsing SystemVerilog input from `insn_c_jr.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_jr'.
Successfully finished Verilog frontend.

26. Executing Verilog-2005 frontend: insn_c_li.v
Parsing SystemVerilog input from `insn_c_li.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_li'.
Successfully finished Verilog frontend.

27. Executing Verilog-2005 frontend: insn_c_lui.v
Parsing SystemVerilog input from `insn_c_lui.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_lui'.
Successfully finished Verilog frontend.

28. Executing Verilog-2005 frontend: insn_c_lw.v
Parsing SystemVerilog input from `insn_c_lw.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_lw'.
Successfully finished Verilog frontend.

29. Executing Verilog-2005 frontend: insn_c_lwsp.v
Parsing SystemVerilog input from `insn_c_lwsp.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_lwsp'.
Successfully finished Verilog frontend.

30. Executing Verilog-2005 frontend: insn_c_mv.v
Parsing SystemVerilog input from `insn_c_mv.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_mv'.
Successfully finished Verilog frontend.

31. Executing Verilog-2005 frontend: insn_c_or.v
Parsing SystemVerilog input from `insn_c_or.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_or'.
Successfully finished Verilog frontend.

32. Executing Verilog-2005 frontend: insn_c_slli.v
Parsing SystemVerilog input from `insn_c_slli.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_slli'.
Successfully finished Verilog frontend.

33. Executing Verilog-2005 frontend: insn_c_srai.v
Parsing SystemVerilog input from `insn_c_srai.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_srai'.
Successfully finished Verilog frontend.

34. Executing Verilog-2005 frontend: insn_c_srli.v
Parsing SystemVerilog input from `insn_c_srli.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_srli'.
Successfully finished Verilog frontend.

35. Executing Verilog-2005 frontend: insn_c_sub.v
Parsing SystemVerilog input from `insn_c_sub.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_sub'.
Successfully finished Verilog frontend.

36. Executing Verilog-2005 frontend: insn_c_sw.v
Parsing SystemVerilog input from `insn_c_sw.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_sw'.
Successfully finished Verilog frontend.

37. Executing Verilog-2005 frontend: insn_c_swsp.v
Parsing SystemVerilog input from `insn_c_swsp.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_swsp'.
Successfully finished Verilog frontend.

38. Executing Verilog-2005 frontend: insn_c_xor.v
Parsing SystemVerilog input from `insn_c_xor.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_c_xor'.
Successfully finished Verilog frontend.

39. Executing Verilog-2005 frontend: insn_jal.v
Parsing SystemVerilog input from `insn_jal.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_jal'.
Successfully finished Verilog frontend.

40. Executing Verilog-2005 frontend: insn_jalr.v
Parsing SystemVerilog input from `insn_jalr.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_jalr'.
Successfully finished Verilog frontend.

41. Executing Verilog-2005 frontend: insn_lb.v
Parsing SystemVerilog input from `insn_lb.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lb'.
Successfully finished Verilog frontend.

42. Executing Verilog-2005 frontend: insn_lbu.v
Parsing SystemVerilog input from `insn_lbu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lbu'.
Successfully finished Verilog frontend.

43. Executing Verilog-2005 frontend: insn_lh.v
Parsing SystemVerilog input from `insn_lh.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lh'.
Successfully finished Verilog frontend.

44. Executing Verilog-2005 frontend: insn_lhu.v
Parsing SystemVerilog input from `insn_lhu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lhu'.
Successfully finished Verilog frontend.

45. Executing Verilog-2005 frontend: insn_lui.v
Parsing SystemVerilog input from `insn_lui.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lui'.
Successfully finished Verilog frontend.

46. Executing Verilog-2005 frontend: insn_lw.v
Parsing SystemVerilog input from `insn_lw.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_lw'.
Successfully finished Verilog frontend.

47. Executing Verilog-2005 frontend: insn_or.v
Parsing SystemVerilog input from `insn_or.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_or'.
Successfully finished Verilog frontend.

48. Executing Verilog-2005 frontend: insn_ori.v
Parsing SystemVerilog input from `insn_ori.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_ori'.
Successfully finished Verilog frontend.

49. Executing Verilog-2005 frontend: insn_sb.v
Parsing SystemVerilog input from `insn_sb.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sb'.
Successfully finished Verilog frontend.

50. Executing Verilog-2005 frontend: insn_sh.v
Parsing SystemVerilog input from `insn_sh.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sh'.
Successfully finished Verilog frontend.

51. Executing Verilog-2005 frontend: insn_sll.v
Parsing SystemVerilog input from `insn_sll.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sll'.
Successfully finished Verilog frontend.

52. Executing Verilog-2005 frontend: insn_slli.v
Parsing SystemVerilog input from `insn_slli.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_slli'.
Successfully finished Verilog frontend.

53. Executing Verilog-2005 frontend: insn_slt.v
Parsing SystemVerilog input from `insn_slt.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_slt'.
Successfully finished Verilog frontend.

54. Executing Verilog-2005 frontend: insn_slti.v
Parsing SystemVerilog input from `insn_slti.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_slti'.
Successfully finished Verilog frontend.

55. Executing Verilog-2005 frontend: insn_sltiu.v
Parsing SystemVerilog input from `insn_sltiu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sltiu'.
Successfully finished Verilog frontend.

56. Executing Verilog-2005 frontend: insn_sltu.v
Parsing SystemVerilog input from `insn_sltu.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sltu'.
Successfully finished Verilog frontend.

57. Executing Verilog-2005 frontend: insn_sra.v
Parsing SystemVerilog input from `insn_sra.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sra'.
Successfully finished Verilog frontend.

58. Executing Verilog-2005 frontend: insn_srai.v
Parsing SystemVerilog input from `insn_srai.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_srai'.
Successfully finished Verilog frontend.

59. Executing Verilog-2005 frontend: insn_srl.v
Parsing SystemVerilog input from `insn_srl.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_srl'.
Successfully finished Verilog frontend.

60. Executing Verilog-2005 frontend: insn_srli.v
Parsing SystemVerilog input from `insn_srli.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_srli'.
Successfully finished Verilog frontend.

61. Executing Verilog-2005 frontend: insn_sub.v
Parsing SystemVerilog input from `insn_sub.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sub'.
Successfully finished Verilog frontend.

62. Executing Verilog-2005 frontend: insn_sw.v
Parsing SystemVerilog input from `insn_sw.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_sw'.
Successfully finished Verilog frontend.

63. Executing Verilog-2005 frontend: insn_xor.v
Parsing SystemVerilog input from `insn_xor.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_xor'.
Successfully finished Verilog frontend.

64. Executing Verilog-2005 frontend: insn_xori.v
Parsing SystemVerilog input from `insn_xori.v' to AST representation.
Generating RTLIL representation for module `\rvfi_insn_xori'.
Successfully finished Verilog frontend.

65. Executing Verilog-2005 frontend: isa_rv32ic.v
Parsing SystemVerilog input from `isa_rv32ic.v' to AST representation.
Generating RTLIL representation for module `\rvfi_isa_rv32ic'.
Successfully finished Verilog frontend.

66. Executing Verilog-2005 frontend: complete.sv
Parsing SystemVerilog input from `complete.sv' to AST representation.
Generating RTLIL representation for module `\testbench'.
Successfully finished Verilog frontend.

67. Executing PREP pass.

67.1. Executing HIERARCHY pass (managing design hierarchy).

67.1.1. Analyzing design hierarchy..
Top module:  \testbench
Used module:     \rvfi_isa_rv32ic
Used module:         \rvfi_insn_xori
Used module:         \rvfi_insn_xor
Used module:         \rvfi_insn_sw
Used module:         \rvfi_insn_sub
Used module:         \rvfi_insn_srli
Used module:         \rvfi_insn_srl
Used module:         \rvfi_insn_srai
Used module:         \rvfi_insn_sra
Used module:         \rvfi_insn_sltu
Used module:         \rvfi_insn_sltiu
Used module:         \rvfi_insn_slti
Used module:         \rvfi_insn_slt
Used module:         \rvfi_insn_slli
Used module:         \rvfi_insn_sll
Used module:         \rvfi_insn_sh
Used module:         \rvfi_insn_sb
Used module:         \rvfi_insn_ori
Used module:         \rvfi_insn_or
Used module:         \rvfi_insn_lw
Used module:         \rvfi_insn_lui
Used module:         \rvfi_insn_lhu
Used module:         \rvfi_insn_lh
Used module:         \rvfi_insn_lbu
Used module:         \rvfi_insn_lb
Used module:         \rvfi_insn_jalr
Used module:         \rvfi_insn_jal
Used module:         \rvfi_insn_c_xor
Used module:         \rvfi_insn_c_swsp
Used module:         \rvfi_insn_c_sw
Used module:         \rvfi_insn_c_sub
Used module:         \rvfi_insn_c_srli
Used module:         \rvfi_insn_c_srai
Used module:         \rvfi_insn_c_slli
Used module:         \rvfi_insn_c_or
Used module:         \rvfi_insn_c_mv
Used module:         \rvfi_insn_c_lwsp
Used module:         \rvfi_insn_c_lw
Used module:         \rvfi_insn_c_lui
Used module:         \rvfi_insn_c_li
Used module:         \rvfi_insn_c_jr
Used module:         \rvfi_insn_c_jalr
Used module:         \rvfi_insn_c_jal
Used module:         \rvfi_insn_c_j
Used module:         \rvfi_insn_c_bnez
Used module:         \rvfi_insn_c_beqz
Used module:         \rvfi_insn_c_andi
Used module:         \rvfi_insn_c_and
Used module:         \rvfi_insn_c_addi4spn
Used module:         \rvfi_insn_c_addi16sp
Used module:         \rvfi_insn_c_addi
Used module:         \rvfi_insn_c_add
Used module:         \rvfi_insn_bne
Used module:         \rvfi_insn_bltu
Used module:         \rvfi_insn_blt
Used module:         \rvfi_insn_bgeu
Used module:         \rvfi_insn_bge
Used module:         \rvfi_insn_beq
Used module:         \rvfi_insn_auipc
Used module:         \rvfi_insn_andi
Used module:         \rvfi_insn_and
Used module:         \rvfi_insn_addi
Used module:         \rvfi_insn_add
Used module:     \myRiscv

67.1.2. Analyzing design hierarchy..
Top module:  \testbench
Used module:     \rvfi_isa_rv32ic
Used module:         \rvfi_insn_xori
Used module:         \rvfi_insn_xor
Used module:         \rvfi_insn_sw
Used module:         \rvfi_insn_sub
Used module:         \rvfi_insn_srli
Used module:         \rvfi_insn_srl
Used module:         \rvfi_insn_srai
Used module:         \rvfi_insn_sra
Used module:         \rvfi_insn_sltu
Used module:         \rvfi_insn_sltiu
Used module:         \rvfi_insn_slti
Used module:         \rvfi_insn_slt
Used module:         \rvfi_insn_slli
Used module:         \rvfi_insn_sll
Used module:         \rvfi_insn_sh
Used module:         \rvfi_insn_sb
Used module:         \rvfi_insn_ori
Used module:         \rvfi_insn_or
Used module:         \rvfi_insn_lw
Used module:         \rvfi_insn_lui
Used module:         \rvfi_insn_lhu
Used module:         \rvfi_insn_lh
Used module:         \rvfi_insn_lbu
Used module:         \rvfi_insn_lb
Used module:         \rvfi_insn_jalr
Used module:         \rvfi_insn_jal
Used module:         \rvfi_insn_c_xor
Used module:         \rvfi_insn_c_swsp
Used module:         \rvfi_insn_c_sw
Used module:         \rvfi_insn_c_sub
Used module:         \rvfi_insn_c_srli
Used module:         \rvfi_insn_c_srai
Used module:         \rvfi_insn_c_slli
Used module:         \rvfi_insn_c_or
Used module:         \rvfi_insn_c_mv
Used module:         \rvfi_insn_c_lwsp
Used module:         \rvfi_insn_c_lw
Used module:         \rvfi_insn_c_lui
Used module:         \rvfi_insn_c_li
Used module:         \rvfi_insn_c_jr
Used module:         \rvfi_insn_c_jalr
Used module:         \rvfi_insn_c_jal
Used module:         \rvfi_insn_c_j
Used module:         \rvfi_insn_c_bnez
Used module:         \rvfi_insn_c_beqz
Used module:         \rvfi_insn_c_andi
Used module:         \rvfi_insn_c_and
Used module:         \rvfi_insn_c_addi4spn
Used module:         \rvfi_insn_c_addi16sp
Used module:         \rvfi_insn_c_addi
Used module:         \rvfi_insn_c_add
Used module:         \rvfi_insn_bne
Used module:         \rvfi_insn_bltu
Used module:         \rvfi_insn_blt
Used module:         \rvfi_insn_bgeu
Used module:         \rvfi_insn_bge
Used module:         \rvfi_insn_beq
Used module:         \rvfi_insn_auipc
Used module:         \rvfi_insn_andi
Used module:         \rvfi_insn_and
Used module:         \rvfi_insn_addi
Used module:         \rvfi_insn_add
Used module:     \myRiscv
Removed 0 unused modules.
Module testbench directly or indirectly contains formal properties -> setting "keep" attribute.

67.2. Executing PROC pass (convert processes to netlists).

67.2.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

67.2.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Marked 10 switch rules as full_case in process $proc$myRiscv.sv:0$68 in module myRiscv.
Removed 1 dead cases from process $proc$myRiscv.sv:0$67 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$67 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$66 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$65 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$48 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:181$24 in module myRiscv.
Removed 1 dead cases from process $proc$myRiscv.sv:0$21 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$21 in module myRiscv.
Removed 1 dead cases from process $proc$myRiscv.sv:0$20 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$20 in module myRiscv.
Removed 1 dead cases from process $proc$myRiscv.sv:0$19 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$19 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:0$18 in module myRiscv.
Marked 1 switch rules as full_case in process $proc$myRiscv.sv:119$13 in module myRiscv.
Removed a total of 4 dead cases.

67.2.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 3 redundant assignments.
Promoted 33 assignments to connections.

67.2.4. Executing PROC_INIT pass (extract init attributes).
Found init rule in `\testbench.$proc$complete.sv:11$2220'.
  Set init value: \reset = 1'1

67.2.5. Executing PROC_ARST pass (detect async resets in processes).

67.2.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\testbench.$proc$complete.sv:11$2220'.
Creating decoders for process `\testbench.$proc$complete.sv:64$2209'.
     1/2: $0$formal$complete.sv:66$2207_EN[0:0]$2211
     2/2: $0$formal$complete.sv:66$2207_CHECK[0:0]$2210
Creating decoders for process `\testbench.$proc$complete.sv:13$2208'.
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$68'.
     1/120: $10\ctrl_instr_trap[0:0]
     2/120: $10\instr_valid[0:0]
     3/120: $10\alu_ctrl[3:0]
     4/120: $10\ld_ctrl[2:0]
     5/120: $10\imm_sel[2:0]
     6/120: $10\wr_data_sel[1:0]
     7/120: $10\rd_data_sel[1:0]
     8/120: $10\pc_sel[1:0]
     9/120: $10\src_2_sel[0:0]
    10/120: $10\src_1_sel[0:0]
    11/120: $10\rf_wr_en[0:0]
    12/120: $10\wr_en[3:0]
    13/120: $9\ctrl_instr_trap[0:0]
    14/120: $9\instr_valid[0:0]
    15/120: $9\alu_ctrl[3:0]
    16/120: $9\ld_ctrl[2:0]
    17/120: $9\imm_sel[2:0]
    18/120: $9\wr_data_sel[1:0]
    19/120: $9\rd_data_sel[1:0]
    20/120: $9\pc_sel[1:0]
    21/120: $9\src_2_sel[0:0]
    22/120: $9\src_1_sel[0:0]
    23/120: $9\rf_wr_en[0:0]
    24/120: $9\wr_en[3:0]
    25/120: $8\ctrl_instr_trap[0:0]
    26/120: $8\instr_valid[0:0]
    27/120: $8\alu_ctrl[3:0]
    28/120: $8\ld_ctrl[2:0]
    29/120: $8\imm_sel[2:0]
    30/120: $8\wr_data_sel[1:0]
    31/120: $8\rd_data_sel[1:0]
    32/120: $8\pc_sel[1:0]
    33/120: $8\src_2_sel[0:0]
    34/120: $8\src_1_sel[0:0]
    35/120: $8\rf_wr_en[0:0]
    36/120: $8\wr_en[3:0]
    37/120: $7\ctrl_instr_trap[0:0]
    38/120: $7\instr_valid[0:0]
    39/120: $7\alu_ctrl[3:0]
    40/120: $7\ld_ctrl[2:0]
    41/120: $7\imm_sel[2:0]
    42/120: $7\wr_data_sel[1:0]
    43/120: $7\rd_data_sel[1:0]
    44/120: $7\pc_sel[1:0]
    45/120: $7\src_2_sel[0:0]
    46/120: $7\src_1_sel[0:0]
    47/120: $7\rf_wr_en[0:0]
    48/120: $7\wr_en[3:0]
    49/120: $6\ctrl_instr_trap[0:0]
    50/120: $6\instr_valid[0:0]
    51/120: $6\alu_ctrl[3:0]
    52/120: $6\ld_ctrl[2:0]
    53/120: $6\imm_sel[2:0]
    54/120: $6\wr_data_sel[1:0]
    55/120: $6\rd_data_sel[1:0]
    56/120: $6\pc_sel[1:0]
    57/120: $6\src_2_sel[0:0]
    58/120: $6\src_1_sel[0:0]
    59/120: $6\rf_wr_en[0:0]
    60/120: $6\wr_en[3:0]
    61/120: $5\ctrl_instr_trap[0:0]
    62/120: $5\instr_valid[0:0]
    63/120: $5\alu_ctrl[3:0]
    64/120: $5\ld_ctrl[2:0]
    65/120: $5\imm_sel[2:0]
    66/120: $5\wr_data_sel[1:0]
    67/120: $5\rd_data_sel[1:0]
    68/120: $5\pc_sel[1:0]
    69/120: $5\src_2_sel[0:0]
    70/120: $5\src_1_sel[0:0]
    71/120: $5\rf_wr_en[0:0]
    72/120: $5\wr_en[3:0]
    73/120: $4\ctrl_instr_trap[0:0]
    74/120: $4\instr_valid[0:0]
    75/120: $4\alu_ctrl[3:0]
    76/120: $4\ld_ctrl[2:0]
    77/120: $4\imm_sel[2:0]
    78/120: $4\wr_data_sel[1:0]
    79/120: $4\rd_data_sel[1:0]
    80/120: $4\pc_sel[1:0]
    81/120: $4\src_2_sel[0:0]
    82/120: $4\src_1_sel[0:0]
    83/120: $4\rf_wr_en[0:0]
    84/120: $4\wr_en[3:0]
    85/120: $3\ctrl_instr_trap[0:0]
    86/120: $3\instr_valid[0:0]
    87/120: $3\alu_ctrl[3:0]
    88/120: $3\ld_ctrl[2:0]
    89/120: $3\imm_sel[2:0]
    90/120: $3\wr_data_sel[1:0]
    91/120: $3\rd_data_sel[1:0]
    92/120: $3\pc_sel[1:0]
    93/120: $3\src_2_sel[0:0]
    94/120: $3\src_1_sel[0:0]
    95/120: $3\rf_wr_en[0:0]
    96/120: $3\wr_en[3:0]
    97/120: $2\ctrl_instr_trap[0:0]
    98/120: $2\instr_valid[0:0]
    99/120: $2\alu_ctrl[3:0]
   100/120: $2\ld_ctrl[2:0]
   101/120: $2\imm_sel[2:0]
   102/120: $2\wr_data_sel[1:0]
   103/120: $2\rd_data_sel[1:0]
   104/120: $2\pc_sel[1:0]
   105/120: $2\src_2_sel[0:0]
   106/120: $2\src_1_sel[0:0]
   107/120: $2\rf_wr_en[0:0]
   108/120: $2\wr_en[3:0]
   109/120: $1\ctrl_instr_trap[0:0]
   110/120: $1\instr_valid[0:0]
   111/120: $1\alu_ctrl[3:0]
   112/120: $1\ld_ctrl[2:0]
   113/120: $1\imm_sel[2:0]
   114/120: $1\wr_data_sel[1:0]
   115/120: $1\rd_data_sel[1:0]
   116/120: $1\pc_sel[1:0]
   117/120: $1\src_2_sel[0:0]
   118/120: $1\src_1_sel[0:0]
   119/120: $1\rf_wr_en[0:0]
   120/120: $1\wr_en[3:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$67'.
     1/1: $1\rvfi_mem_rmask[3:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$66'.
     1/1: $1\rd_data_ext[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$65'.
     1/1: $1\imm_ext[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$48'.
     1/4: $1\carry[0:0]
     2/4: $1\addr[31:0]
     3/4: $1\o_flag[0:0]
     4/4: $1\b_flag[0:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$41'.
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:181$24'.
     1/6: $1$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$34
     2/6: $1$memwr$\mem$myRiscv.sv:183$1_DATA[31:0]$33
     3/6: $1$memwr$\mem$myRiscv.sv:183$1_ADDR[4:0]$32
     4/6: $1$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$37
     5/6: $1$memwr$\mem$myRiscv.sv:185$2_DATA[31:0]$36
     6/6: $1$memwr$\mem$myRiscv.sv:185$2_ADDR[4:0]$35
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$21'.
     1/1: $1\dst_data[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$20'.
     1/1: $1\alu_in_2[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$19'.
     1/1: $1\alu_in_1[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:0$18'.
     1/1: $1\pc_next[31:0]
Creating decoders for process `\myRiscv.$proc$myRiscv.sv:119$13'.
     1/3: $0\instr_index[63:0]
     2/3: $0\pc_last[31:0]
     3/3: $0\pc[31:0]

67.2.7. Executing PROC_DLATCH pass (convert process syncs to latches).
No latch inferred for signal `\testbench.$formal$complete.sv:66$2207_CHECK' from process `\testbench.$proc$complete.sv:64$2209'.
No latch inferred for signal `\testbench.$formal$complete.sv:66$2207_EN' from process `\testbench.$proc$complete.sv:64$2209'.
No latch inferred for signal `\myRiscv.\wr_en' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\rf_wr_en' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\src_1_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\src_2_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\pc_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\rd_data_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\wr_data_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\imm_sel' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\ld_ctrl' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\alu_ctrl' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\instr_valid' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\ctrl_instr_trap' from process `\myRiscv.$proc$myRiscv.sv:0$68'.
No latch inferred for signal `\myRiscv.\rvfi_mem_rmask' from process `\myRiscv.$proc$myRiscv.sv:0$67'.
No latch inferred for signal `\myRiscv.\rd_data_ext' from process `\myRiscv.$proc$myRiscv.sv:0$66'.
No latch inferred for signal `\myRiscv.\imm_ext' from process `\myRiscv.$proc$myRiscv.sv:0$65'.
No latch inferred for signal `\myRiscv.\addr' from process `\myRiscv.$proc$myRiscv.sv:0$48'.
No latch inferred for signal `\myRiscv.\o_flag' from process `\myRiscv.$proc$myRiscv.sv:0$48'.
No latch inferred for signal `\myRiscv.\b_flag' from process `\myRiscv.$proc$myRiscv.sv:0$48'.
No latch inferred for signal `\myRiscv.\carry' from process `\myRiscv.$proc$myRiscv.sv:0$48'.
No latch inferred for signal `\myRiscv.\src_data_1' from process `\myRiscv.$proc$myRiscv.sv:0$41'.
No latch inferred for signal `\myRiscv.\src_data_2' from process `\myRiscv.$proc$myRiscv.sv:0$41'.
No latch inferred for signal `\myRiscv.\dst_data' from process `\myRiscv.$proc$myRiscv.sv:0$21'.
No latch inferred for signal `\myRiscv.\alu_in_2' from process `\myRiscv.$proc$myRiscv.sv:0$20'.
No latch inferred for signal `\myRiscv.\alu_in_1' from process `\myRiscv.$proc$myRiscv.sv:0$19'.
No latch inferred for signal `\myRiscv.\pc_next' from process `\myRiscv.$proc$myRiscv.sv:0$18'.

67.2.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\testbench.\reset' using process `\testbench.$proc$complete.sv:13$2208'.
  created $dff cell `$procdff$3836' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:183$1_ADDR' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3837' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:183$1_DATA' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3838' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:183$1_EN' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3839' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:185$2_ADDR' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3840' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:185$2_DATA' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3841' with positive edge clock.
Creating register for signal `\myRiscv.$memwr$\mem$myRiscv.sv:185$2_EN' using process `\myRiscv.$proc$myRiscv.sv:181$24'.
  created $dff cell `$procdff$3842' with positive edge clock.
Creating register for signal `\myRiscv.\pc' using process `\myRiscv.$proc$myRiscv.sv:119$13'.
  created $dff cell `$procdff$3843' with positive edge clock.
Creating register for signal `\myRiscv.\pc_last' using process `\myRiscv.$proc$myRiscv.sv:119$13'.
  created $dff cell `$procdff$3844' with positive edge clock.
Creating register for signal `\myRiscv.\instr_index' using process `\myRiscv.$proc$myRiscv.sv:119$13'.
  created $dff cell `$procdff$3845' with positive edge clock.

67.2.9. Executing PROC_MEMWR pass (convert process memory writes to cells).

67.2.10. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `testbench.$proc$complete.sv:11$2220'.
Found and cleaned up 2 empty switches in `\testbench.$proc$complete.sv:64$2209'.
Removing empty process `testbench.$proc$complete.sv:64$2209'.
Removing empty process `testbench.$proc$complete.sv:13$2208'.
Found and cleaned up 10 empty switches in `\myRiscv.$proc$myRiscv.sv:0$68'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$68'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$67'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$67'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$66'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$66'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$65'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$65'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$48'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$48'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$41'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:181$24'.
Removing empty process `myRiscv.$proc$myRiscv.sv:181$24'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$21'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$21'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$20'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$20'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$19'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$19'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:0$18'.
Removing empty process `myRiscv.$proc$myRiscv.sv:0$18'.
Found and cleaned up 1 empty switch in `\myRiscv.$proc$myRiscv.sv:119$13'.
Removing empty process `myRiscv.$proc$myRiscv.sv:119$13'.
Cleaned up 22 empty switches.

67.2.11. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.
Optimizing module rvfi_isa_rv32ic.
Optimizing module rvfi_insn_xori.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_xor.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_sw.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_sub.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_srli.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_srl.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_srai.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_sra.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_sltu.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_sltiu.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_slti.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_slt.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_slli.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_sll.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_sh.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_sb.
<suppressed ~7 debug messages>
Optimizing module rvfi_insn_ori.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_or.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_lw.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_lui.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_lhu.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_lh.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_lbu.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_lb.
<suppressed ~7 debug messages>
Optimizing module rvfi_insn_jalr.
<suppressed ~9 debug messages>
Optimizing module rvfi_insn_jal.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_c_xor.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_swsp.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_sw.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_c_sub.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_c_srli.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_c_srai.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_c_slli.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_or.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_mv.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_lwsp.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_lw.
<suppressed ~7 debug messages>
Optimizing module rvfi_insn_c_lui.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_li.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_jr.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_jalr.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_jal.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_j.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_bnez.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_c_beqz.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_c_andi.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_and.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_c_addi4spn.
<suppressed ~6 debug messages>
Optimizing module rvfi_insn_c_addi16sp.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_c_addi.
<suppressed ~3 debug messages>
Optimizing module rvfi_insn_c_add.
<suppressed ~2 debug messages>
Optimizing module rvfi_insn_bne.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_bltu.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_blt.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_bgeu.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_bge.
<suppressed ~8 debug messages>
Optimizing module rvfi_insn_beq.
<suppressed ~9 debug messages>
Optimizing module rvfi_insn_auipc.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_andi.
<suppressed ~4 debug messages>
Optimizing module rvfi_insn_and.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_addi.
<suppressed ~5 debug messages>
Optimizing module rvfi_insn_add.
<suppressed ~6 debug messages>
Optimizing module myRiscv.
<suppressed ~70 debug messages>

67.3. Executing OPT_EXPR pass (perform const folding).
Optimizing module testbench.
Optimizing module rvfi_isa_rv32ic.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_add.
Optimizing module myRiscv.

67.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \testbench..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \myRiscv..
Removed 75 unused cells and 1407 unused wires.
<suppressed ~579 debug messages>

67.5. Executing CHECK pass (checking for obvious problems).
Checking module myRiscv...
Checking module rvfi_insn_add...
Checking module rvfi_insn_addi...
Checking module rvfi_insn_and...
Checking module rvfi_insn_andi...
Checking module rvfi_insn_auipc...
Checking module rvfi_insn_beq...
Checking module rvfi_insn_bge...
Checking module rvfi_insn_bgeu...
Checking module rvfi_insn_blt...
Checking module rvfi_insn_bltu...
Checking module rvfi_insn_bne...
Checking module rvfi_insn_c_add...
Checking module rvfi_insn_c_addi...
Checking module rvfi_insn_c_addi16sp...
Checking module rvfi_insn_c_addi4spn...
Checking module rvfi_insn_c_and...
Checking module rvfi_insn_c_andi...
Checking module rvfi_insn_c_beqz...
Checking module rvfi_insn_c_bnez...
Checking module rvfi_insn_c_j...
Checking module rvfi_insn_c_jal...
Checking module rvfi_insn_c_jalr...
Checking module rvfi_insn_c_jr...
Checking module rvfi_insn_c_li...
Checking module rvfi_insn_c_lui...
Checking module rvfi_insn_c_lw...
Checking module rvfi_insn_c_lwsp...
Checking module rvfi_insn_c_mv...
Checking module rvfi_insn_c_or...
Checking module rvfi_insn_c_slli...
Checking module rvfi_insn_c_srai...
Checking module rvfi_insn_c_srli...
Checking module rvfi_insn_c_sub...
Checking module rvfi_insn_c_sw...
Checking module rvfi_insn_c_swsp...
Checking module rvfi_insn_c_xor...
Checking module rvfi_insn_jal...
Checking module rvfi_insn_jalr...
Checking module rvfi_insn_lb...
Checking module rvfi_insn_lbu...
Checking module rvfi_insn_lh...
Checking module rvfi_insn_lhu...
Checking module rvfi_insn_lui...
Checking module rvfi_insn_lw...
Checking module rvfi_insn_or...
Checking module rvfi_insn_ori...
Checking module rvfi_insn_sb...
Checking module rvfi_insn_sh...
Checking module rvfi_insn_sll...
Checking module rvfi_insn_slli...
Checking module rvfi_insn_slt...
Checking module rvfi_insn_slti...
Checking module rvfi_insn_sltiu...
Checking module rvfi_insn_sltu...
Checking module rvfi_insn_sra...
Checking module rvfi_insn_srai...
Checking module rvfi_insn_srl...
Checking module rvfi_insn_srli...
Checking module rvfi_insn_sub...
Checking module rvfi_insn_sw...
Checking module rvfi_insn_xor...
Checking module rvfi_insn_xori...
Checking module rvfi_isa_rv32ic...
Checking module testbench...
Found and reported 0 problems.

67.6. Executing OPT pass (performing simple optimizations).

67.6.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

67.6.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
<suppressed ~537 debug messages>
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_c_lwsp'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_c_swsp'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_lbu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_lh'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_lhu'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_sh'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 191 cells.

67.6.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \myRiscv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
    dead port 1/2 on $mux $procmux$2749.
    dead port 2/2 on $mux $procmux$2751.
    dead port 1/2 on $mux $procmux$2763.
    dead port 2/2 on $mux $procmux$2765.
    dead port 2/2 on $mux $procmux$2667.
    dead port 1/2 on $mux $procmux$2777.
    dead port 2/2 on $mux $procmux$2779.
    dead port 1/2 on $mux $procmux$2791.
    dead port 2/2 on $mux $procmux$2793.
    dead port 1/2 on $mux $procmux$2805.
    dead port 2/2 on $mux $procmux$2807.
    dead port 1/2 on $mux $procmux$2819.
    dead port 2/2 on $mux $procmux$2821.
    dead port 2/2 on $mux $procmux$2832.
    dead port 2/2 on $mux $procmux$2854.
    dead port 2/2 on $mux $procmux$2898.
    dead port 2/2 on $mux $procmux$2909.
    dead port 2/2 on $mux $procmux$2920.
    dead port 2/2 on $mux $procmux$2931.
    dead port 2/2 on $mux $procmux$2942.
    dead port 2/2 on $mux $procmux$2953.
    dead port 2/2 on $mux $procmux$2965.
    dead port 2/2 on $mux $procmux$2989.
    dead port 2/2 on $mux $procmux$3013.
    dead port 2/2 on $mux $procmux$3048.
    dead port 2/2 on $mux $procmux$3060.
    dead port 2/2 on $mux $procmux$3072.
    dead port 2/2 on $mux $procmux$3083.
    dead port 2/2 on $mux $procmux$3095.
    dead port 1/2 on $mux $procmux$3109.
    dead port 2/2 on $mux $procmux$3111.
    dead port 1/2 on $mux $procmux$3141.
    dead port 2/2 on $mux $procmux$3143.
    dead port 1/2 on $mux $procmux$3171.
    dead port 2/2 on $mux $procmux$3173.
    dead port 1/2 on $mux $procmux$3201.
    dead port 2/2 on $mux $procmux$3203.
    dead port 1/2 on $mux $procmux$3216.
    dead port 2/2 on $mux $procmux$3218.
    dead port 1/2 on $mux $procmux$3232.
    dead port 2/2 on $mux $procmux$3234.
    dead port 1/2 on $mux $procmux$3248.
    dead port 2/2 on $mux $procmux$3250.
    dead port 1/2 on $mux $procmux$3264.
    dead port 2/2 on $mux $procmux$3266.
    dead port 1/2 on $mux $procmux$3279.
    dead port 2/2 on $mux $procmux$3281.
    dead port 2/2 on $mux $procmux$3294.
    dead port 2/2 on $mux $procmux$3320.
    dead port 2/2 on $mux $procmux$3346.
    dead port 2/2 on $mux $procmux$3372.
    dead port 2/2 on $mux $procmux$3385.
    dead port 2/2 on $mux $procmux$3398.
    dead port 2/2 on $mux $procmux$3411.
    dead port 2/2 on $mux $procmux$3424.
    dead port 2/2 on $mux $procmux$3437.
    dead port 2/2 on $mux $procmux$3451.
    dead port 2/2 on $mux $procmux$3479.
    dead port 2/2 on $mux $procmux$3493.
    dead port 2/2 on $mux $procmux$3507.
    dead port 2/2 on $mux $procmux$3533.
    dead port 2/2 on $mux $procmux$3546.
    dead port 2/2 on $mux $procmux$2235.
    dead port 2/2 on $mux $procmux$3560.
    dead port 2/2 on $mux $procmux$3574.
    dead port 2/2 on $mux $procmux$3588.
    dead port 2/2 on $mux $procmux$2251.
    dead port 2/2 on $mux $procmux$3601.
    dead port 2/2 on $mux $procmux$2271.
    dead port 2/2 on $mux $procmux$2291.
    dead port 2/2 on $mux $procmux$2299.
    dead port 2/2 on $mux $procmux$2307.
    dead port 2/2 on $mux $procmux$2315.
    dead port 2/2 on $mux $procmux$2323.
    dead port 2/2 on $mux $procmux$2330.
    dead port 2/2 on $mux $procmux$2340.
    dead port 2/2 on $mux $procmux$2360.
    dead port 2/2 on $mux $procmux$2382.
    dead port 2/2 on $mux $procmux$2416.
    dead port 2/2 on $mux $procmux$2426.
    dead port 2/2 on $mux $procmux$2436.
    dead port 1/2 on $mux $procmux$2693.
    dead port 2/2 on $mux $procmux$2445.
    dead port 2/2 on $mux $procmux$2695.
    dead port 2/2 on $mux $procmux$2454.
    dead port 1/2 on $mux $procmux$2466.
    dead port 1/2 on $mux $procmux$2469.
    dead port 2/2 on $mux $procmux$2471.
    dead port 1/2 on $mux $procmux$2500.
    dead port 1/2 on $mux $procmux$2503.
    dead port 2/2 on $mux $procmux$2505.
    dead port 1/2 on $mux $procmux$2565.
    dead port 1/2 on $mux $procmux$2568.
    dead port 2/2 on $mux $procmux$2570.
    dead port 1/2 on $mux $procmux$2581.
    dead port 1/2 on $mux $procmux$2584.
    dead port 2/2 on $mux $procmux$2586.
    dead port 1/2 on $mux $procmux$2598.
    dead port 1/2 on $mux $procmux$2601.
    dead port 2/2 on $mux $procmux$2603.
    dead port 1/2 on $mux $procmux$2615.
    dead port 1/2 on $mux $procmux$2618.
    dead port 2/2 on $mux $procmux$2620.
    dead port 1/2 on $mux $procmux$2665.
    dead port 1/2 on $mux $procmux$2632.
    dead port 1/2 on $mux $procmux$2635.
    dead port 2/2 on $mux $procmux$2637.
    dead port 1/2 on $mux $procmux$2648.
    dead port 1/2 on $mux $procmux$2651.
    dead port 2/2 on $mux $procmux$2653.
    dead port 1/2 on $mux $ternary$myRiscv.sv:129$17.
Running muxtree optimizer on module \rvfi_insn_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_addi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_and..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_andi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_auipc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_beq..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bge..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bgeu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_blt..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bltu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bne..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi16sp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi4spn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_and..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_andi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_beqz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_bnez..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_j..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jal..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jalr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_li..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_lui..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_lw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_lwsp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_mv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_or..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_slli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_srai..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_srli..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_sw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_swsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_xor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_jal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_jalr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lb..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lh..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lhu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lui..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_or..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_ori..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_sh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_sll..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slt..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slti..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sltiu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sltu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srai..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sub..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_xor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_xori..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_isa_rv32ic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2446$1214: { 31'0000000000000000000000000000000 \spec_insn_add_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2447$1212: { 31'0000000000000000000000000000000 \spec_insn_addi_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2448$1210: { 31'0000000000000000000000000000000 \spec_insn_and_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2449$1208: { 31'0000000000000000000000000000000 \spec_insn_andi_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2450$1206: { 31'0000000000000000000000000000000 \spec_insn_auipc_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2451$1204: { 31'0000000000000000000000000000000 \spec_insn_beq_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2452$1202: { 31'0000000000000000000000000000000 \spec_insn_bge_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2453$1200: { 31'0000000000000000000000000000000 \spec_insn_bgeu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2454$1198: { 31'0000000000000000000000000000000 \spec_insn_blt_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2455$1196: { 31'0000000000000000000000000000000 \spec_insn_bltu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2456$1194: { 31'0000000000000000000000000000000 \spec_insn_bne_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2457$1192: { 31'0000000000000000000000000000000 \spec_insn_c_add_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2458$1190: { 31'0000000000000000000000000000000 \spec_insn_c_addi_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2459$1188: { 31'0000000000000000000000000000000 \spec_insn_c_addi16sp_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2460$1186: { 31'0000000000000000000000000000000 \spec_insn_c_addi4spn_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2461$1184: { 31'0000000000000000000000000000000 \spec_insn_c_and_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2462$1182: { 31'0000000000000000000000000000000 \spec_insn_c_andi_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2463$1180: { 31'0000000000000000000000000000000 \spec_insn_c_beqz_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2464$1178: { 31'0000000000000000000000000000000 \spec_insn_c_bnez_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2465$1176: { 31'0000000000000000000000000000000 \spec_insn_c_j_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2466$1174: { 31'0000000000000000000000000000000 \spec_insn_c_jal_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2467$1172: { 31'0000000000000000000000000000000 \spec_insn_c_jalr_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2468$1170: { 31'0000000000000000000000000000000 \spec_insn_c_jr_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2469$1168: { 31'0000000000000000000000000000000 \spec_insn_c_li_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2470$1166: { 31'0000000000000000000000000000000 \spec_insn_c_lui_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2471$1164: { 31'0000000000000000000000000000000 \spec_insn_c_lw_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2472$1162: { 31'0000000000000000000000000000000 \spec_insn_c_lwsp_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2473$1160: { 31'0000000000000000000000000000000 \spec_insn_c_mv_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2474$1158: { 31'0000000000000000000000000000000 \spec_insn_c_or_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2475$1156: { 31'0000000000000000000000000000000 \spec_insn_c_slli_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2476$1154: { 31'0000000000000000000000000000000 \spec_insn_c_srai_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2477$1152: { 31'0000000000000000000000000000000 \spec_insn_c_srli_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2478$1150: { 31'0000000000000000000000000000000 \spec_insn_c_sub_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2479$1148: { 31'0000000000000000000000000000000 \spec_insn_c_sw_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2480$1146: { 31'0000000000000000000000000000000 \spec_insn_c_swsp_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2481$1144: { 31'0000000000000000000000000000000 \spec_insn_c_xor_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2482$1142: { 31'0000000000000000000000000000000 \spec_insn_jal_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2483$1140: { 31'0000000000000000000000000000000 \spec_insn_jalr_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2484$1138: { 31'0000000000000000000000000000000 \spec_insn_lb_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2485$1136: { 31'0000000000000000000000000000000 \spec_insn_lbu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2486$1134: { 31'0000000000000000000000000000000 \spec_insn_lh_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2487$1132: { 31'0000000000000000000000000000000 \spec_insn_lhu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2488$1130: { 31'0000000000000000000000000000000 \spec_insn_lui_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2489$1128: { 31'0000000000000000000000000000000 \spec_insn_lw_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2490$1126: { 31'0000000000000000000000000000000 \spec_insn_or_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2491$1124: { 31'0000000000000000000000000000000 \spec_insn_ori_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2492$1122: { 31'0000000000000000000000000000000 \spec_insn_sb_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2493$1120: { 31'0000000000000000000000000000000 \spec_insn_sh_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2494$1118: { 31'0000000000000000000000000000000 \spec_insn_sll_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2495$1116: { 31'0000000000000000000000000000000 \spec_insn_slli_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2496$1114: { 31'0000000000000000000000000000000 \spec_insn_slt_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2497$1112: { 31'0000000000000000000000000000000 \spec_insn_slti_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2498$1110: { 31'0000000000000000000000000000000 \spec_insn_sltiu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2499$1108: { 31'0000000000000000000000000000000 \spec_insn_sltu_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2500$1106: { 31'0000000000000000000000000000000 \spec_insn_sra_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2501$1104: { 31'0000000000000000000000000000000 \spec_insn_srai_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2502$1102: { 31'0000000000000000000000000000000 \spec_insn_srl_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2503$1100: { 31'0000000000000000000000000000000 \spec_insn_srli_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2504$1098: { 31'0000000000000000000000000000000 \spec_insn_sub_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2505$1096: { 31'0000000000000000000000000000000 \spec_insn_sw_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2506$1094: { 31'0000000000000000000000000000000 \spec_insn_xor_valid } -> 1
      Replacing known input bits on port B of cell $ternary$isa_rv32ic.v:2507$1092: { 31'0000000000000000000000000000000 \spec_insn_xori_valid } -> 1
  Analyzing evaluation results.
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 111 multiplexer ports.
<suppressed ~89 debug messages>

67.6.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \myRiscv.
    New ctrl vector for $mux cell $procmux$3383: { }
    New ctrl vector for $mux cell $procmux$3435: { }
    New ctrl vector for $mux cell $procmux$2760: { }
    New ctrl vector for $pmux cell $procmux$3604: { $procmux$3452_CMP $procmux$3112_CMP $procmux$2966_CMP $procmux$2472_CMP $procmux$2341_CMP $procmux$3608_CMP $procmux$2236_CMP $auto$opt_reduce.cc:134:opt_mux$3849 }
    New ctrl vector for $pmux cell $procmux$3637: $procmux$3452_CMP
    New ctrl vector for $pmux cell $procmux$3645: { $procmux$3452_CMP $procmux$3112_CMP $procmux$2966_CMP $procmux$2341_CMP $procmux$3608_CMP $procmux$2236_CMP $auto$opt_reduce.cc:134:opt_mux$3851 }
    New ctrl vector for $mux cell $procmux$2907: { }
    New ctrl vector for $pmux cell $procmux$3666: { $procmux$3452_CMP $procmux$3112_CMP $procmux$2472_CMP $procmux$3608_CMP $procmux$2236_CMP $procmux$3606_CMP $procmux$3605_CMP }
    New ctrl vector for $pmux cell $procmux$3679: { $procmux$2341_CMP $procmux$3608_CMP $procmux$2236_CMP }
    New ctrl vector for $mux cell $procmux$2816: { }
    New ctrl vector for $pmux cell $procmux$3706: { $procmux$3452_CMP $procmux$3112_CMP $procmux$2472_CMP $procmux$3608_CMP $procmux$2236_CMP $auto$opt_reduce.cc:134:opt_mux$3853 }
    New ctrl vector for $mux cell $procmux$2951: { }
    New ctrl vector for $pmux cell $procmux$3719: $procmux$2966_CMP
    New ctrl vector for $pmux cell $procmux$3727: { $procmux$3730_CMP $procmux$3729_CMP $auto$opt_reduce.cc:134:opt_mux$3855 }
    Consolidated identical input bits for $mux cell $procmux$3794:
      Old ports: A=0, B=32'11111111111111111111111111111111, Y=$0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27
      New ports: A=1'0, B=1'1, Y=$0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0]
      New connections: $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [31:1] = { $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] $0$memwr$\mem$myRiscv.sv:183$1_EN[31:0]$27 [0] }
    Consolidated identical input bits for $mux cell $procmux$3803:
      Old ports: A=32'11111111111111111111111111111111, B=0, Y=$0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30
      New ports: A=1'1, B=1'0, Y=$0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0]
      New connections: $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [31:1] = { $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] $0$memwr$\mem$myRiscv.sv:185$2_EN[31:0]$30 [0] }
  Optimizing cells in module \myRiscv.
  Optimizing cells in module \rvfi_insn_add.
  Optimizing cells in module \rvfi_insn_addi.
  Optimizing cells in module \rvfi_insn_and.
  Optimizing cells in module \rvfi_insn_andi.
  Optimizing cells in module \rvfi_insn_auipc.
  Optimizing cells in module \rvfi_insn_beq.
  Optimizing cells in module \rvfi_insn_bge.
  Optimizing cells in module \rvfi_insn_bgeu.
  Optimizing cells in module \rvfi_insn_blt.
  Optimizing cells in module \rvfi_insn_bltu.
  Optimizing cells in module \rvfi_insn_bne.
  Optimizing cells in module \rvfi_insn_c_add.
  Optimizing cells in module \rvfi_insn_c_addi.
  Optimizing cells in module \rvfi_insn_c_addi16sp.
  Optimizing cells in module \rvfi_insn_c_addi4spn.
  Optimizing cells in module \rvfi_insn_c_and.
  Optimizing cells in module \rvfi_insn_c_andi.
  Optimizing cells in module \rvfi_insn_c_beqz.
  Optimizing cells in module \rvfi_insn_c_bnez.
  Optimizing cells in module \rvfi_insn_c_j.
  Optimizing cells in module \rvfi_insn_c_jal.
  Optimizing cells in module \rvfi_insn_c_jalr.
  Optimizing cells in module \rvfi_insn_c_jr.
  Optimizing cells in module \rvfi_insn_c_li.
  Optimizing cells in module \rvfi_insn_c_lui.
  Optimizing cells in module \rvfi_insn_c_lw.
  Optimizing cells in module \rvfi_insn_c_lwsp.
  Optimizing cells in module \rvfi_insn_c_mv.
  Optimizing cells in module \rvfi_insn_c_or.
  Optimizing cells in module \rvfi_insn_c_slli.
  Optimizing cells in module \rvfi_insn_c_srai.
  Optimizing cells in module \rvfi_insn_c_srli.
  Optimizing cells in module \rvfi_insn_c_sub.
  Optimizing cells in module \rvfi_insn_c_sw.
  Optimizing cells in module \rvfi_insn_c_swsp.
  Optimizing cells in module \rvfi_insn_c_xor.
  Optimizing cells in module \rvfi_insn_jal.
  Optimizing cells in module \rvfi_insn_jalr.
  Optimizing cells in module \rvfi_insn_lb.
  Optimizing cells in module \rvfi_insn_lbu.
  Optimizing cells in module \rvfi_insn_lh.
  Optimizing cells in module \rvfi_insn_lhu.
  Optimizing cells in module \rvfi_insn_lui.
  Optimizing cells in module \rvfi_insn_lw.
  Optimizing cells in module \rvfi_insn_or.
  Optimizing cells in module \rvfi_insn_ori.
  Optimizing cells in module \rvfi_insn_sb.
  Optimizing cells in module \rvfi_insn_sh.
  Optimizing cells in module \rvfi_insn_sll.
  Optimizing cells in module \rvfi_insn_slli.
  Optimizing cells in module \rvfi_insn_slt.
  Optimizing cells in module \rvfi_insn_slti.
  Optimizing cells in module \rvfi_insn_sltiu.
  Optimizing cells in module \rvfi_insn_sltu.
  Optimizing cells in module \rvfi_insn_sra.
  Optimizing cells in module \rvfi_insn_srai.
  Optimizing cells in module \rvfi_insn_srl.
  Optimizing cells in module \rvfi_insn_srli.
  Optimizing cells in module \rvfi_insn_sub.
  Optimizing cells in module \rvfi_insn_sw.
  Optimizing cells in module \rvfi_insn_xor.
  Optimizing cells in module \rvfi_insn_xori.
  Optimizing cells in module \rvfi_isa_rv32ic.
  Optimizing cells in module \testbench.
Performed a total of 16 changes.

67.6.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
<suppressed ~21 debug messages>
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
Finding identical cells in module `\rvfi_insn_c_lwsp'.
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
Finding identical cells in module `\rvfi_insn_c_swsp'.
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
Finding identical cells in module `\rvfi_insn_lbu'.
Finding identical cells in module `\rvfi_insn_lh'.
Finding identical cells in module `\rvfi_insn_lhu'.
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
Finding identical cells in module `\rvfi_insn_sh'.
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 7 cells.

67.6.6. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..
Removed 0 unused cells and 315 unused wires.
<suppressed ~13 debug messages>

67.6.7. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

67.6.8. Rerunning OPT passes. (Maybe there is more to do..)

67.6.9. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \myRiscv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_addi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_and..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_andi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_auipc..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_beq..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bge..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bgeu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_blt..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bltu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_bne..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_add..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi16sp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_addi4spn..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_and..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_andi..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_beqz..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_bnez..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_j..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jal..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jalr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_jr..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_li..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_lui..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_lw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_lwsp..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_mv..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_or..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_slli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_c_srai..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_srli..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_sub..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_sw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_swsp..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_c_xor..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_jal..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_jalr..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lb..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lbu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lh..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lhu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lui..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_lw..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_or..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_ori..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sb..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_sh..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_sll..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slt..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_slti..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sltiu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sltu..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sra..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srai..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srl..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_srli..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sub..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_sw..
  Creating internal representation of mux trees.
  No muxes found in this module.
Running muxtree optimizer on module \rvfi_insn_xor..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_insn_xori..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \rvfi_isa_rv32ic..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Running muxtree optimizer on module \testbench..
  Creating internal representation of mux trees.
  Evaluating internal representation of mux trees.
  Analyzing evaluation results.
Removed 0 multiplexer ports.
<suppressed ~92 debug messages>

67.6.10. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \myRiscv.
  Optimizing cells in module \rvfi_insn_add.
  Optimizing cells in module \rvfi_insn_addi.
  Optimizing cells in module \rvfi_insn_and.
  Optimizing cells in module \rvfi_insn_andi.
  Optimizing cells in module \rvfi_insn_auipc.
  Optimizing cells in module \rvfi_insn_beq.
  Optimizing cells in module \rvfi_insn_bge.
  Optimizing cells in module \rvfi_insn_bgeu.
  Optimizing cells in module \rvfi_insn_blt.
  Optimizing cells in module \rvfi_insn_bltu.
  Optimizing cells in module \rvfi_insn_bne.
  Optimizing cells in module \rvfi_insn_c_add.
  Optimizing cells in module \rvfi_insn_c_addi.
  Optimizing cells in module \rvfi_insn_c_addi16sp.
  Optimizing cells in module \rvfi_insn_c_addi4spn.
  Optimizing cells in module \rvfi_insn_c_and.
  Optimizing cells in module \rvfi_insn_c_andi.
  Optimizing cells in module \rvfi_insn_c_beqz.
  Optimizing cells in module \rvfi_insn_c_bnez.
  Optimizing cells in module \rvfi_insn_c_j.
  Optimizing cells in module \rvfi_insn_c_jal.
  Optimizing cells in module \rvfi_insn_c_jalr.
  Optimizing cells in module \rvfi_insn_c_jr.
  Optimizing cells in module \rvfi_insn_c_li.
  Optimizing cells in module \rvfi_insn_c_lui.
  Optimizing cells in module \rvfi_insn_c_lw.
  Optimizing cells in module \rvfi_insn_c_lwsp.
  Optimizing cells in module \rvfi_insn_c_mv.
  Optimizing cells in module \rvfi_insn_c_or.
  Optimizing cells in module \rvfi_insn_c_slli.
  Optimizing cells in module \rvfi_insn_c_srai.
  Optimizing cells in module \rvfi_insn_c_srli.
  Optimizing cells in module \rvfi_insn_c_sub.
  Optimizing cells in module \rvfi_insn_c_sw.
  Optimizing cells in module \rvfi_insn_c_swsp.
  Optimizing cells in module \rvfi_insn_c_xor.
  Optimizing cells in module \rvfi_insn_jal.
  Optimizing cells in module \rvfi_insn_jalr.
  Optimizing cells in module \rvfi_insn_lb.
  Optimizing cells in module \rvfi_insn_lbu.
  Optimizing cells in module \rvfi_insn_lh.
  Optimizing cells in module \rvfi_insn_lhu.
  Optimizing cells in module \rvfi_insn_lui.
  Optimizing cells in module \rvfi_insn_lw.
  Optimizing cells in module \rvfi_insn_or.
  Optimizing cells in module \rvfi_insn_ori.
  Optimizing cells in module \rvfi_insn_sb.
  Optimizing cells in module \rvfi_insn_sh.
  Optimizing cells in module \rvfi_insn_sll.
  Optimizing cells in module \rvfi_insn_slli.
  Optimizing cells in module \rvfi_insn_slt.
  Optimizing cells in module \rvfi_insn_slti.
  Optimizing cells in module \rvfi_insn_sltiu.
  Optimizing cells in module \rvfi_insn_sltu.
  Optimizing cells in module \rvfi_insn_sra.
  Optimizing cells in module \rvfi_insn_srai.
  Optimizing cells in module \rvfi_insn_srl.
  Optimizing cells in module \rvfi_insn_srli.
  Optimizing cells in module \rvfi_insn_sub.
  Optimizing cells in module \rvfi_insn_sw.
  Optimizing cells in module \rvfi_insn_xor.
  Optimizing cells in module \rvfi_insn_xori.
  Optimizing cells in module \rvfi_isa_rv32ic.
  Optimizing cells in module \testbench.
Performed a total of 0 changes.

67.6.11. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
Finding identical cells in module `\rvfi_insn_c_lwsp'.
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
Finding identical cells in module `\rvfi_insn_c_swsp'.
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
Finding identical cells in module `\rvfi_insn_lbu'.
Finding identical cells in module `\rvfi_insn_lh'.
Finding identical cells in module `\rvfi_insn_lhu'.
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
Finding identical cells in module `\rvfi_insn_sh'.
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

67.6.12. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..

67.6.13. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

67.6.14. Finished OPT passes. (There is nothing left to do.)

67.7. Executing WREDUCE pass (reducing word size of cells).
Removed top 28 bits (of 32) from port B of cell myRiscv.$add$myRiscv.sv:104$6 ($add).
Removed top 63 bits (of 64) from port B of cell myRiscv.$add$myRiscv.sv:129$16 ($add).
Removed top 1 bits (of 3) from port B of cell myRiscv.$eq$myRiscv.sv:399$69 ($eq).
Removed top 2 bits (of 3) from port B of cell myRiscv.$eq$myRiscv.sv:431$78 ($eq).
Removed top 1 bits (of 7) from port B of cell myRiscv.$ne$myRiscv.sv:445$83 ($ne).
Removed top 2 bits (of 3) from port B of cell myRiscv.$ne$myRiscv.sv:475$93 ($ne).
Removed top 1 bits (of 3) from port B of cell myRiscv.$ne$myRiscv.sv:475$95 ($ne).
Removed top 1 bits (of 3) from port B of cell myRiscv.$eq$myRiscv.sv:565$114 ($eq).
Removed top 1 bits (of 2) from mux cell myRiscv.$ternary$myRiscv.sv:585$121 ($mux).
Removed top 1 bits (of 2) from mux cell myRiscv.$ternary$myRiscv.sv:603$134 ($mux).
Removed top 1 bits (of 2) from mux cell myRiscv.$procmux$2414 ($mux).
Removed top 1 bits (of 7) from port B of cell myRiscv.$procmux$2472_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell myRiscv.$procmux$2966_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell myRiscv.$procmux$3112_CMP0 ($eq).
Removed top 5 bits (of 7) from port B of cell myRiscv.$procmux$3452_CMP0 ($eq).
Removed top 2 bits (of 7) from port B of cell myRiscv.$procmux$3605_CMP0 ($eq).
Removed top 1 bits (of 7) from port B of cell myRiscv.$procmux$3606_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell myRiscv.$procmux$3729_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell myRiscv.$procmux$3730_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell myRiscv.$procmux$3743_CMP0 ($eq).
Removed top 1 bits (of 3) from port B of cell myRiscv.$procmux$3744_CMP0 ($eq).
Removed top 2 bits (of 3) from port B of cell myRiscv.$procmux$3745_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell myRiscv.$procmux$3761_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell myRiscv.$procmux$3762_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell myRiscv.$procmux$3764_CMP0 ($eq).
Removed top 1 bits (of 4) from port B of cell myRiscv.$procmux$3765_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell myRiscv.$procmux$3766_CMP0 ($eq).
Removed top 2 bits (of 4) from port B of cell myRiscv.$procmux$3767_CMP0 ($eq).
Removed top 3 bits (of 4) from port B of cell myRiscv.$procmux$3768_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell myRiscv.$procmux$3814_CMP0 ($eq).
Removed top 1 bits (of 2) from port B of cell myRiscv.$procmux$3825_CMP0 ($eq).
Removed top 1 bits (of 2) from wire myRiscv.$9\pc_sel[1:0].
Removed top 31 bits (of 32) from wire myRiscv.$lt$myRiscv.sv:245$58_Y.
Removed top 1 bits (of 2) from wire myRiscv.$ternary$myRiscv.sv:585$121_Y.
Removed top 1 bits (of 2) from wire myRiscv.$ternary$myRiscv.sv:603$134_Y.
Removed top 1 bits (of 7) from port B of cell rvfi_insn_add.$eq$insn_add.v:46$160 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_add.$add$insn_add.v:51$164 ($add).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_addi.$eq$insn_addi.v:45$172 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_addi.$add$insn_addi.v:49$176 ($add).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_and.$eq$insn_and.v:46$186 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_and.$add$insn_and.v:51$190 ($add).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_andi.$eq$insn_andi.v:45$198 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_andi.$add$insn_andi.v:49$202 ($add).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_auipc.$eq$insn_auipc.v:42$207 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_auipc.$add$insn_auipc.v:45$212 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_beq.$add$insn_beq.v:51$217 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_bge.$add$insn_bge.v:51$233 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_bgeu.$add$insn_bgeu.v:51$249 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_blt.$add$insn_blt.v:51$265 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_bltu.$add$insn_bltu.v:51$281 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_bne.$add$insn_bne.v:51$297 ($add).
Removed top 2 bits (of 3) from port B of cell rvfi_insn_bne.$eq$insn_bne.v:52$301 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_add.$add$insn_c_add.v:49$321 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_add.insn_padding.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_addi.$eq$insn_c_addi.v:44$329 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_addi.$add$insn_c_addi.v:48$333 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_addi.insn_padding.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_c_addi16sp.$eq$insn_c_addi16sp.v:44$339 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_addi16sp.$eq$insn_c_addi16sp.v:44$341 ($eq).
Removed top 3 bits (of 5) from port B of cell rvfi_insn_c_addi16sp.$eq$insn_c_addi16sp.v:44$343 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_addi16sp.$add$insn_c_addi16sp.v:48$348 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_addi16sp.insn_padding.
Removed top 22 bits (of 32) from port B of cell rvfi_insn_c_addi4spn.$add$insn_c_addi4spn.v:43$351 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_addi4spn.$add$insn_c_addi4spn.v:48$361 ($add).
Removed top 22 bits (of 32) from wire rvfi_insn_c_addi4spn.insn_imm.
Removed top 16 bits (of 32) from wire rvfi_insn_c_addi4spn.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_addi4spn.insn_rd.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_and.$eq$insn_c_and.v:45$371 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_and.$add$insn_c_and.v:50$375 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_and.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_and.insn_rs1_rd.
Removed top 2 bits (of 5) from wire rvfi_insn_c_and.insn_rs2.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_andi.$eq$insn_c_andi.v:45$385 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_andi.$add$insn_c_andi.v:49$389 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_andi.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_andi.insn_rs1_rd.
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_beqz.$add$insn_c_beqz.v:44$394 ($add).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_beqz.$eq$insn_c_beqz.v:45$400 ($eq).
Removed top 16 bits (of 32) from wire rvfi_insn_c_beqz.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_beqz.insn_rs1.
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_bnez.$add$insn_c_bnez.v:44$408 ($add).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_bnez.$eq$insn_c_bnez.v:45$414 ($eq).
Removed top 16 bits (of 32) from wire rvfi_insn_c_bnez.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_bnez.insn_rs1.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_j.$eq$insn_c_j.v:44$425 ($eq).
Removed top 16 bits (of 32) from wire rvfi_insn_c_j.insn_padding.
Removed top 2 bits (of 3) from port B of cell rvfi_insn_c_jal.$eq$insn_c_jal.v:44$432 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_jal.$eq$insn_c_jal.v:44$434 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_jal.$add$insn_c_jal.v:46$436 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_jal.insn_padding.
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_jalr.$add$insn_c_jalr.v:47$449 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_jalr.insn_padding.
Removed top 16 bits (of 32) from wire rvfi_insn_c_jr.insn_padding.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_c_li.$eq$insn_c_li.v:44$470 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_li.$eq$insn_c_li.v:44$472 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_li.$add$insn_c_li.v:47$476 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_li.insn_padding.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_c_lui.$eq$insn_c_lui.v:44$481 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_lui.$eq$insn_c_lui.v:44$483 ($eq).
Removed top 3 bits (of 5) from port B of cell rvfi_insn_c_lui.$ne$insn_c_lui.v:44$485 ($ne).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_lui.$add$insn_c_lui.v:47$490 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_lui.insn_padding.
Removed top 25 bits (of 32) from port B of cell rvfi_insn_c_lw.$add$insn_c_lw.v:45$493 ($add).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_c_lw.$mul$insn_c_lw.v:46$495 ($mul).
Removed top 1 bits (of 3) from port B of cell rvfi_insn_c_lw.$eq$insn_c_lw.v:47$499 ($eq).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_c_lw.$shl$insn_c_lw.v:51$505 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_c_lw.$shl$insn_c_lw.v:51$505 ($shl).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_lw.$add$insn_c_lw.v:53$508 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_lw.$and$insn_c_lw.v:54$509 ($and).
Removed top 25 bits (of 32) from wire rvfi_insn_c_lw.insn_imm.
Removed top 16 bits (of 32) from wire rvfi_insn_c_lw.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_lw.insn_rd.
Removed top 2 bits (of 5) from wire rvfi_insn_c_lw.insn_rs1.
Removed top 24 bits (of 32) from port B of cell rvfi_insn_c_lwsp.$add$insn_c_lwsp.v:44$514 ($add).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_c_lwsp.$mul$insn_c_lwsp.v:45$516 ($mul).
Removed top 1 bits (of 3) from port B of cell rvfi_insn_c_lwsp.$eq$insn_c_lwsp.v:46$520 ($eq).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_c_lwsp.$shl$insn_c_lwsp.v:50$527 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_c_lwsp.$shl$insn_c_lwsp.v:50$527 ($shl).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_lwsp.$add$insn_c_lwsp.v:52$530 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_lwsp.$and$insn_c_lwsp.v:53$531 ($and).
Removed top 24 bits (of 32) from wire rvfi_insn_c_lwsp.insn_imm.
Removed top 16 bits (of 32) from wire rvfi_insn_c_lwsp.insn_padding.
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_mv.$add$insn_c_mv.v:48$545 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_mv.insn_padding.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_or.$eq$insn_c_or.v:45$555 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_or.$add$insn_c_or.v:50$559 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_or.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_or.insn_rs1_rd.
Removed top 2 bits (of 5) from wire rvfi_insn_c_or.insn_rs2.
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_slli.$add$insn_c_slli.v:48$574 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_slli.insn_padding.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_srai.$eq$insn_c_srai.v:45$582 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_srai.$eq$insn_c_srai.v:45$584 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_srai.$add$insn_c_srai.v:49$591 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_srai.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_srai.insn_rs1_rd.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_srli.$eq$insn_c_srli.v:45$601 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_srli.$add$insn_c_srli.v:49$608 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_srli.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_srli.insn_rs1_rd.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_sub.$eq$insn_c_sub.v:45$618 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_sub.$add$insn_c_sub.v:50$622 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_sub.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_sub.insn_rs1_rd.
Removed top 2 bits (of 5) from wire rvfi_insn_c_sub.insn_rs2.
Removed top 25 bits (of 32) from port B of cell rvfi_insn_c_sw.$add$insn_c_sw.v:44$625 ($add).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_c_sw.$shl$insn_c_sw.v:50$634 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_c_sw.$shl$insn_c_sw.v:50$634 ($shl).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_c_sw.$mul$insn_c_sw.v:51$636 ($mul).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_sw.$add$insn_c_sw.v:52$638 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_sw.$and$insn_c_sw.v:53$639 ($and).
Removed top 25 bits (of 32) from wire rvfi_insn_c_sw.insn_imm.
Removed top 16 bits (of 32) from wire rvfi_insn_c_sw.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_sw.insn_rs1.
Removed top 2 bits (of 5) from wire rvfi_insn_c_sw.insn_rs2.
Removed top 24 bits (of 32) from port B of cell rvfi_insn_c_swsp.$add$insn_c_swsp.v:44$644 ($add).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_c_swsp.$shl$insn_c_swsp.v:49$653 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_c_swsp.$shl$insn_c_swsp.v:49$653 ($shl).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_c_swsp.$mul$insn_c_swsp.v:50$655 ($mul).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_swsp.$add$insn_c_swsp.v:51$657 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_swsp.$and$insn_c_swsp.v:52$658 ($and).
Removed top 24 bits (of 32) from wire rvfi_insn_c_swsp.insn_imm.
Removed top 16 bits (of 32) from wire rvfi_insn_c_swsp.insn_padding.
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_xor.$eq$insn_c_xor.v:45$668 ($eq).
Removed top 1 bits (of 2) from port B of cell rvfi_insn_c_xor.$eq$insn_c_xor.v:45$670 ($eq).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_c_xor.$add$insn_c_xor.v:50$674 ($add).
Removed top 16 bits (of 32) from wire rvfi_insn_c_xor.insn_padding.
Removed top 2 bits (of 5) from wire rvfi_insn_c_xor.insn_rs1_rd.
Removed top 2 bits (of 5) from wire rvfi_insn_c_xor.insn_rs2.
Removed top 29 bits (of 32) from port B of cell rvfi_insn_jal.$add$insn_jal.v:51$682 ($add).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_jalr.$add$insn_jalr.v:54$699 ($add).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_lb.$mul$insn_lb.v:46$710 ($mul).
Removed top 24 bits (of 32) from port Y of cell rvfi_insn_lb.$shr$insn_lb.v:46$711 ($shr).
Removed top 5 bits (of 7) from port B of cell rvfi_insn_lb.$eq$insn_lb.v:47$716 ($eq).
Removed top 30 bits (of 32) from port A of cell rvfi_insn_lb.$shl$insn_lb.v:51$720 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_lb.$shl$insn_lb.v:51$720 ($shl).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lb.$add$insn_lb.v:53$723 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_lb.$and$insn_lb.v:54$724 ($and).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_lbu.$mul$insn_lbu.v:46$731 ($mul).
Removed top 24 bits (of 32) from port Y of cell rvfi_insn_lbu.$shr$insn_lbu.v:46$732 ($shr).
Removed top 5 bits (of 7) from port B of cell rvfi_insn_lbu.$eq$insn_lbu.v:47$737 ($eq).
Removed top 30 bits (of 32) from port A of cell rvfi_insn_lbu.$shl$insn_lbu.v:51$741 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_lbu.$shl$insn_lbu.v:51$741 ($shl).
Removed top 24 bits (of 32) from mux cell rvfi_insn_lbu.$ternary$insn_lbu.v:52$744 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lbu.$add$insn_lbu.v:53$745 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_lbu.$and$insn_lbu.v:54$746 ($and).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_lh.$mul$insn_lh.v:46$753 ($mul).
Removed top 16 bits (of 32) from port Y of cell rvfi_insn_lh.$shr$insn_lh.v:46$754 ($shr).
Removed top 2 bits (of 3) from port B of cell rvfi_insn_lh.$eq$insn_lh.v:47$757 ($eq).
Removed top 5 bits (of 7) from port B of cell rvfi_insn_lh.$eq$insn_lh.v:47$759 ($eq).
Removed top 29 bits (of 32) from port A of cell rvfi_insn_lh.$shl$insn_lh.v:51$763 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_lh.$shl$insn_lh.v:51$763 ($shl).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lh.$add$insn_lh.v:53$766 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_lh.$and$insn_lh.v:54$767 ($and).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_lhu.$mul$insn_lhu.v:46$774 ($mul).
Removed top 16 bits (of 32) from port Y of cell rvfi_insn_lhu.$shr$insn_lhu.v:46$775 ($shr).
Removed top 5 bits (of 7) from port B of cell rvfi_insn_lhu.$eq$insn_lhu.v:47$780 ($eq).
Removed top 29 bits (of 32) from port A of cell rvfi_insn_lhu.$shl$insn_lhu.v:51$784 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_lhu.$shl$insn_lhu.v:51$784 ($shl).
Removed top 16 bits (of 32) from mux cell rvfi_insn_lhu.$ternary$insn_lhu.v:52$787 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lhu.$add$insn_lhu.v:53$788 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_lhu.$and$insn_lhu.v:54$789 ($and).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_lui.$eq$insn_lui.v:42$796 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lui.$add$insn_lui.v:45$800 ($add).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_lw.$mul$insn_lw.v:46$805 ($mul).
Removed top 1 bits (of 3) from port B of cell rvfi_insn_lw.$eq$insn_lw.v:47$809 ($eq).
Removed top 5 bits (of 7) from port B of cell rvfi_insn_lw.$eq$insn_lw.v:47$811 ($eq).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_lw.$shl$insn_lw.v:51$815 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_lw.$shl$insn_lw.v:51$815 ($shl).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_lw.$add$insn_lw.v:53$818 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_lw.$and$insn_lw.v:54$819 ($and).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_or.$eq$insn_or.v:46$831 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_or.$add$insn_or.v:51$835 ($add).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_ori.$eq$insn_ori.v:45$843 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_ori.$add$insn_ori.v:49$847 ($add).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sb.$eq$insn_sb.v:46$855 ($eq).
Removed top 30 bits (of 32) from port A of cell rvfi_insn_sb.$shl$insn_sb.v:50$859 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_sb.$shl$insn_sb.v:50$859 ($shl).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_sb.$mul$insn_sb.v:51$861 ($mul).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sb.$add$insn_sb.v:52$863 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_sb.$and$insn_sb.v:53$864 ($and).
Removed top 2 bits (of 3) from port B of cell rvfi_insn_sh.$eq$insn_sh.v:46$872 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sh.$eq$insn_sh.v:46$874 ($eq).
Removed top 29 bits (of 32) from port A of cell rvfi_insn_sh.$shl$insn_sh.v:50$878 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_sh.$shl$insn_sh.v:50$878 ($shl).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_sh.$mul$insn_sh.v:51$880 ($mul).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sh.$add$insn_sh.v:52$882 ($add).
Removed top 31 bits (of 32) from port B of cell rvfi_insn_sh.$and$insn_sh.v:53$883 ($and).
Removed top 1 bits (of 6) from port B of cell rvfi_insn_sll.$shl$insn_sll.v:46$888 ($shl).
Removed top 2 bits (of 3) from port B of cell rvfi_insn_sll.$eq$insn_sll.v:47$893 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sll.$eq$insn_sll.v:47$895 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sll.$add$insn_sll.v:52$899 ($add).
Removed top 1 bits (of 6) from wire rvfi_insn_sll.shamt.
Removed top 2 bits (of 3) from port B of cell rvfi_insn_slli.$eq$insn_slli.v:46$907 ($eq).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_slli.$eq$insn_slli.v:46$909 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_slli.$add$insn_slli.v:50$916 ($add).
Removed top 1 bits (of 7) from wire rvfi_insn_slli.insn_funct6.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_slt.$eq$insn_slt.v:46$924 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_slt.$eq$insn_slt.v:46$926 ($eq).
Removed top 31 bits (of 32) from mux cell rvfi_insn_slt.$ternary$insn_slt.v:50$929 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_slt.$add$insn_slt.v:51$930 ($add).
Removed top 31 bits (of 32) from wire rvfi_insn_slt.result.
Removed top 20 bits (of 32) from port B of cell rvfi_insn_slti.$lt$insn_slti.v:44$933 ($lt).
Removed top 1 bits (of 3) from port B of cell rvfi_insn_slti.$eq$insn_slti.v:45$936 ($eq).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_slti.$eq$insn_slti.v:45$938 ($eq).
Removed top 31 bits (of 32) from mux cell rvfi_insn_slti.$ternary$insn_slti.v:48$941 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_slti.$add$insn_slti.v:49$942 ($add).
Removed top 31 bits (of 32) from wire rvfi_insn_slti.result.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_sltiu.$eq$insn_sltiu.v:45$948 ($eq).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_sltiu.$eq$insn_sltiu.v:45$950 ($eq).
Removed top 31 bits (of 32) from mux cell rvfi_insn_sltiu.$ternary$insn_sltiu.v:48$953 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sltiu.$add$insn_sltiu.v:49$954 ($add).
Removed top 31 bits (of 32) from wire rvfi_insn_sltiu.result.
Removed top 1 bits (of 3) from port B of cell rvfi_insn_sltu.$eq$insn_sltu.v:46$962 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sltu.$eq$insn_sltu.v:46$964 ($eq).
Removed top 31 bits (of 32) from mux cell rvfi_insn_sltu.$ternary$insn_sltu.v:50$967 ($mux).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sltu.$add$insn_sltu.v:51$968 ($add).
Removed top 31 bits (of 32) from wire rvfi_insn_sltu.result.
Removed top 1 bits (of 6) from port B of cell rvfi_insn_sra.$sshr$insn_sra.v:46$971 ($sshr).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sra.$eq$insn_sra.v:47$974 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sra.$eq$insn_sra.v:47$978 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sra.$add$insn_sra.v:52$982 ($add).
Removed top 1 bits (of 6) from wire rvfi_insn_sra.shamt.
Removed top 1 bits (of 6) from port B of cell rvfi_insn_srai.$eq$insn_srai.v:46$988 ($eq).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_srai.$eq$insn_srai.v:46$992 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_srai.$add$insn_srai.v:50$999 ($add).
Removed top 1 bits (of 7) from wire rvfi_insn_srai.insn_funct6.
Removed top 1 bits (of 6) from port B of cell rvfi_insn_srl.$shr$insn_srl.v:46$1002 ($shr).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_srl.$eq$insn_srl.v:47$1009 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_srl.$add$insn_srl.v:52$1013 ($add).
Removed top 1 bits (of 6) from wire rvfi_insn_srl.shamt.
Removed top 2 bits (of 7) from port B of cell rvfi_insn_srli.$eq$insn_srli.v:46$1023 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_srli.$add$insn_srli.v:50$1030 ($add).
Removed top 1 bits (of 7) from wire rvfi_insn_srli.insn_funct6.
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sub.$eq$insn_sub.v:46$1036 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sub.$eq$insn_sub.v:46$1040 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sub.$add$insn_sub.v:51$1044 ($add).
Removed top 1 bits (of 3) from port B of cell rvfi_insn_sw.$eq$insn_sw.v:46$1050 ($eq).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_sw.$eq$insn_sw.v:46$1052 ($eq).
Removed top 27 bits (of 32) from port A of cell rvfi_insn_sw.$shl$insn_sw.v:50$1056 ($shl).
Removed top 28 bits (of 32) from port Y of cell rvfi_insn_sw.$shl$insn_sw.v:50$1056 ($shl).
Removed top 28 bits (of 32) from port A of cell rvfi_insn_sw.$mul$insn_sw.v:51$1058 ($mul).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_sw.$add$insn_sw.v:52$1060 ($add).
Removed top 30 bits (of 32) from port B of cell rvfi_insn_sw.$and$insn_sw.v:53$1061 ($and).
Removed top 1 bits (of 7) from port B of cell rvfi_insn_xor.$eq$insn_xor.v:46$1073 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_xor.$add$insn_xor.v:51$1077 ($add).
Removed top 2 bits (of 7) from port B of cell rvfi_insn_xori.$eq$insn_xori.v:45$1085 ($eq).
Removed top 29 bits (of 32) from port B of cell rvfi_insn_xori.$add$insn_xori.v:49$1089 ($add).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2507$1092 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2506$1094 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2505$1096 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2504$1098 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2503$1100 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2502$1102 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2501$1104 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2500$1106 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2499$1108 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2498$1110 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2497$1112 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2496$1114 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2495$1116 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2494$1118 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2493$1120 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2492$1122 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2491$1124 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2490$1126 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2489$1128 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2488$1130 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2487$1132 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2486$1134 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2485$1136 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2484$1138 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2483$1140 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2482$1142 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2481$1144 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2480$1146 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2479$1148 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2478$1150 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2477$1152 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2476$1154 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2475$1156 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2474$1158 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2473$1160 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2472$1162 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2471$1164 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2470$1166 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2469$1168 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2468$1170 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2467$1172 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2466$1174 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2465$1176 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2464$1178 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2463$1180 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2462$1182 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2461$1184 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2460$1186 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2459$1188 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2458$1190 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2457$1192 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2456$1194 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2455$1196 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2454$1198 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2453$1200 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2452$1202 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2451$1204 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2450$1206 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2449$1208 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2448$1210 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2447$1212 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2446$1214 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2570$1216 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2569$1218 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2568$1220 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2567$1222 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2566$1224 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2565$1226 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2564$1228 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2563$1230 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2562$1232 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2561$1234 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2560$1236 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2559$1238 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2558$1240 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2557$1242 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2556$1244 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2555$1246 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2554$1248 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2553$1250 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2552$1252 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2551$1254 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2550$1256 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2549$1258 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2548$1260 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2547$1262 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2546$1264 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2545$1266 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2544$1268 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2543$1270 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2542$1272 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2541$1274 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2540$1276 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2539$1278 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2538$1280 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2537$1282 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2536$1284 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2535$1286 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2534$1288 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2533$1290 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2532$1292 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2531$1294 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2530$1296 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2529$1298 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2528$1300 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2527$1302 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2526$1304 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2525$1306 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2524$1308 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2523$1310 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2522$1312 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2521$1314 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2520$1316 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2519$1318 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2518$1320 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2517$1322 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2516$1324 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2515$1326 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2514$1328 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2513$1330 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2512$1332 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2511$1334 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2510$1336 ($mux).
Removed top 31 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2509$1338 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2633$1340 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2632$1342 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2631$1344 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2630$1346 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2629$1348 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2628$1350 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2627$1352 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2626$1354 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2625$1356 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2624$1358 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2623$1360 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2622$1362 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2621$1364 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2620$1366 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2619$1368 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2618$1370 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2617$1372 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2616$1374 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2615$1376 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2614$1378 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2613$1380 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2612$1382 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2611$1384 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2610$1386 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2609$1388 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2608$1390 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2607$1392 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2606$1394 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2605$1396 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2604$1398 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2603$1400 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2602$1402 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2601$1404 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2600$1406 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2599$1408 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2598$1410 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2597$1412 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2596$1414 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2595$1416 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2594$1418 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2593$1420 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2592$1422 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2591$1424 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2590$1426 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2589$1428 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2588$1430 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2587$1432 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2586$1434 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2585$1436 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2584$1438 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2583$1440 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2582$1442 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2581$1444 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2580$1446 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2579$1448 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2578$1450 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2577$1452 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2576$1454 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2575$1456 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2574$1458 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2573$1460 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2572$1462 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2696$1464 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2695$1466 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2694$1468 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2693$1470 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2692$1472 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2691$1474 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2690$1476 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2689$1478 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2688$1480 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2687$1482 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2686$1484 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2685$1486 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2684$1488 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2683$1490 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2682$1492 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2681$1494 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2680$1496 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2679$1498 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2678$1500 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2677$1502 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2676$1504 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2675$1506 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2674$1508 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2673$1510 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2672$1512 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2671$1514 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2670$1516 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2669$1518 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2668$1520 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2667$1522 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2666$1524 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2665$1526 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2664$1528 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2663$1530 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2662$1532 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2661$1534 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2660$1536 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2659$1538 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2658$1540 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2657$1542 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2656$1544 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2655$1546 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2654$1548 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2653$1550 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2652$1552 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2651$1554 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2650$1556 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2649$1558 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2648$1560 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2647$1562 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2646$1564 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2645$1566 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2644$1568 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2643$1570 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2642$1572 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2641$1574 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2640$1576 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2639$1578 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2638$1580 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2637$1582 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2636$1584 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2635$1586 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2759$1588 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2758$1590 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2757$1592 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2756$1594 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2755$1596 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2754$1598 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2753$1600 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2752$1602 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2751$1604 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2750$1606 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2749$1608 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2748$1610 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2747$1612 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2746$1614 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2745$1616 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2744$1618 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2743$1620 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2742$1622 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2741$1624 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2740$1626 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2739$1628 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2738$1630 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2737$1632 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2736$1634 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2735$1636 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2734$1638 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2733$1640 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2732$1642 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2731$1644 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2730$1646 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2729$1648 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2728$1650 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2727$1652 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2726$1654 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2725$1656 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2724$1658 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2723$1660 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2722$1662 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2721$1664 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2720$1666 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2719$1668 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2718$1670 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2717$1672 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2716$1674 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2715$1676 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2714$1678 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2713$1680 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2712$1682 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2711$1684 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2710$1686 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2709$1688 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2708$1690 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2707$1692 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2706$1694 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2705$1696 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2704$1698 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2703$1700 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2702$1702 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2701$1704 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2700$1706 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2699$1708 ($mux).
Removed top 27 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2698$1710 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3011$1898 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3010$1900 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3009$1902 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3008$1904 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3007$1906 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3006$1908 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3005$1910 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3004$1912 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3003$1914 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3002$1916 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3001$1918 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3000$1920 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2999$1922 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2998$1924 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2997$1926 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2996$1928 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2995$1930 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2994$1932 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2993$1934 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2992$1936 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2991$1938 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2990$1940 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2989$1942 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2988$1944 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2987$1946 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2986$1948 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2985$1950 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2984$1952 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2983$1954 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2982$1956 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2981$1958 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2980$1960 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2979$1962 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2978$1964 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2977$1966 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2976$1968 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2975$1970 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2974$1972 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2973$1974 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2972$1976 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2971$1978 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2970$1980 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2969$1982 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2968$1984 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2967$1986 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2966$1988 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2965$1990 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2964$1992 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2963$1994 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2962$1996 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2961$1998 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2960$2000 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2959$2002 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2958$2004 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2957$2006 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2956$2008 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2955$2010 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2954$2012 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2953$2014 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2952$2016 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2951$2018 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2950$2020 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3074$2022 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3073$2024 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3072$2026 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3071$2028 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3070$2030 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3069$2032 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3068$2034 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3067$2036 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3066$2038 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3065$2040 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3064$2042 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3063$2044 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3062$2046 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3061$2048 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3060$2050 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3059$2052 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3058$2054 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3057$2056 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3056$2058 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3055$2060 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3054$2062 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3053$2064 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3052$2066 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3051$2068 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3050$2070 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3049$2072 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3048$2074 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3047$2076 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3046$2078 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3045$2080 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3044$2082 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3043$2084 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3042$2086 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3041$2088 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3040$2090 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3039$2092 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3038$2094 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3037$2096 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3036$2098 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3035$2100 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3034$2102 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3033$2104 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3032$2106 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3031$2108 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3030$2110 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3029$2112 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3028$2114 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3027$2116 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3026$2118 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3025$2120 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3024$2122 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3023$2124 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3022$2126 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3021$2128 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3020$2130 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3019$2132 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3018$2134 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3017$2136 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3016$2138 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3015$2140 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3014$2142 ($mux).
Removed top 28 bits (of 32) from mux cell rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:3013$2144 ($mux).
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2447$1212_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2448$1210_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2449$1208_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2450$1206_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2451$1204_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2452$1202_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2453$1200_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2454$1198_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2455$1196_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2456$1194_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2457$1192_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2458$1190_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2459$1188_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2460$1186_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2461$1184_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2462$1182_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2463$1180_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2464$1178_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2465$1176_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2466$1174_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2467$1172_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2468$1170_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2469$1168_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2470$1166_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2471$1164_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2472$1162_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2473$1160_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2474$1158_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2475$1156_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2476$1154_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2477$1152_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2478$1150_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2479$1148_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2480$1146_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2481$1144_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2482$1142_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2483$1140_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2484$1138_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2485$1136_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2486$1134_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2487$1132_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2488$1130_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2489$1128_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2490$1126_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2491$1124_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2492$1122_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2493$1120_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2494$1118_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2495$1116_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2496$1114_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2497$1112_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2498$1110_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2499$1108_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2500$1106_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2501$1104_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2502$1102_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2503$1100_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2504$1098_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2505$1096_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2506$1094_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2507$1092_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2510$1336_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2511$1334_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2512$1332_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2513$1330_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2514$1328_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2515$1326_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2516$1324_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2517$1322_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2518$1320_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2519$1318_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2520$1316_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2521$1314_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2522$1312_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2523$1310_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2524$1308_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2525$1306_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2526$1304_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2527$1302_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2528$1300_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2529$1298_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2530$1296_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2531$1294_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2532$1292_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2533$1290_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2534$1288_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2535$1286_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2536$1284_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2537$1282_Y.
Removed top 31 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2538$1280_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2573$1460_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2574$1458_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2575$1456_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2576$1454_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2577$1452_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2578$1450_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2579$1448_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2580$1446_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2581$1444_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2582$1442_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2583$1440_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2584$1438_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2585$1436_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2586$1434_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2587$1432_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2588$1430_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2589$1428_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2590$1426_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2591$1424_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2592$1422_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2593$1420_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2594$1418_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2595$1416_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2596$1414_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2597$1412_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2598$1410_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2599$1408_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2600$1406_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2601$1404_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2602$1402_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2603$1400_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2604$1398_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2605$1396_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2606$1394_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2607$1392_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2608$1390_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2609$1388_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2610$1386_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2611$1384_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2612$1382_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2613$1380_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2614$1378_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2615$1376_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2616$1374_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2617$1372_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2618$1370_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2619$1368_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2620$1366_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2621$1364_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2622$1362_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2623$1360_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2624$1358_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2625$1356_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2626$1354_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2627$1352_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2628$1350_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2629$1348_Y.
Removed top 27 bits (of 32) from wire rvfi_isa_rv32ic.$ternary$isa_rv32ic.v:2630$1346_Y.

67.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..
Removed 0 unused cells and 233 unused wires.
<suppressed ~45 debug messages>

67.9. Executing MEMORY_COLLECT pass (generating $mem cells).

67.10. Executing OPT pass (performing simple optimizations).

67.10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

67.10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
<suppressed ~3 debug messages>
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
Finding identical cells in module `\rvfi_insn_c_lwsp'.
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
Finding identical cells in module `\rvfi_insn_c_swsp'.
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
Finding identical cells in module `\rvfi_insn_lbu'.
Finding identical cells in module `\rvfi_insn_lh'.
Finding identical cells in module `\rvfi_insn_lhu'.
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
Finding identical cells in module `\rvfi_insn_sh'.
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 1 cells.

67.10.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

67.10.4. Finished fast OPT passes.

67.11. Printing statistics.

=== myRiscv ===

   Number of wires:                239
   Number of wire bits:           2073
   Number of public wires:          61
   Number of public wire bits:    1051
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                206
     $add                            4
     $and                            5
     $dff                            3
     $eq                            38
     $logic_and                      6
     $logic_not                     10
     $logic_or                       8
     $lt                             2
     $mem_v2                         1
     $mux                           85
     $ne                             3
     $not                            5
     $or                             2
     $pmux                          17
     $reduce_bool                    5
     $reduce_or                      2
     $shl                            1
     $shr                            1
     $sshr                           1
     $sub                            1
     $xor                            6

=== rvfi_insn_add ===

   Number of wires:                 32
   Number of wire bits:            417
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            2
     $eq                             1
     $logic_and                      3
     $logic_not                      2
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_addi ===

   Number of wires:                 29
   Number of wire bits:            435
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             1
     $logic_and                      2
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_and ===

   Number of wires:                 32
   Number of wire bits:            417
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $and                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_andi ===

   Number of wires:                 29
   Number of wire bits:            435
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $and                            1
     $eq                             2
     $logic_and                      2
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_auipc ===

   Number of wires:                 25
   Number of wire bits:            425
   Number of public wires:          22
   Number of public wire bits:     391
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $add                            2
     $eq                             1
     $logic_and                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_beq ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $logic_and                      2
     $logic_not                      1
     $mux                            1

=== rvfi_insn_bge ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $ge                             1
     $logic_and                      2
     $mux                            1

=== rvfi_insn_bgeu ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $ge                             1
     $logic_and                      2
     $mux                            1

=== rvfi_insn_blt ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $logic_and                      2
     $lt                             1
     $mux                            1

=== rvfi_insn_bltu ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $logic_and                      2
     $lt                             1
     $mux                            1

=== rvfi_insn_bne ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          27
   Number of public wire bits:     433
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $logic_and                      2
     $mux                            1
     $ne                             1

=== rvfi_insn_c_add ===

   Number of wires:                 31
   Number of wire bits:            386
   Number of public wires:          24
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $add                            2
     $eq                             2
     $logic_and                      4
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_addi ===

   Number of wires:                 30
   Number of wire bits:            411
   Number of public wires:          24
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            2
     $eq                             1
     $logic_and                      3
     $logic_not                      2
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_addi16sp ===

   Number of wires:                 33
   Number of wire bits:            414
   Number of public wires:          24
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            2
     $eq                             3
     $logic_and                      5
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_addi4spn ===

   Number of wires:                 30
   Number of wire bits:            387
   Number of public wires:          24
   Number of public wire bits:     381
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                            2
     $logic_and                      4
     $logic_not                      3

=== rvfi_insn_c_and ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $and                            1
     $eq                             3
     $logic_and                      4
     $logic_not                      1

=== rvfi_insn_c_andi ===

   Number of wires:                 32
   Number of wire bits:            412
   Number of public wires:          25
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $and                            1
     $eq                             3
     $logic_and                      4
     $logic_not                      1

=== rvfi_insn_c_beqz ===

   Number of wires:                 32
   Number of wire bits:            473
   Number of public wires:          25
   Number of public wire bits:     404
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            2
     $eq                             2
     $logic_and                      3
     $logic_not                      2
     $mux                            1

=== rvfi_insn_c_bnez ===

   Number of wires:                 32
   Number of wire bits:            473
   Number of public wires:          25
   Number of public wire bits:     404
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            2
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_j ===

   Number of wires:                 28
   Number of wire bits:            405
   Number of public wires:          23
   Number of public wire bits:     400
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  7
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1

=== rvfi_insn_c_jal ===

   Number of wires:                 28
   Number of wire bits:            405
   Number of public wires:          23
   Number of public wire bits:     400
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            2
     $eq                             2
     $logic_and                      3
     $logic_not                      1

=== rvfi_insn_c_jalr ===

   Number of wires:                 32
   Number of wire bits:            387
   Number of public wires:          24
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 11
     $add                            1
     $and                            1
     $eq                             2
     $logic_and                      5
     $logic_not                      2

=== rvfi_insn_c_jr ===

   Number of wires:                 32
   Number of wire bits:            387
   Number of public wires:          24
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $and                            1
     $eq                             2
     $logic_and                      5
     $logic_not                      2

=== rvfi_insn_c_li ===

   Number of wires:                 30
   Number of wire bits:            411
   Number of public wires:          24
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_lui ===

   Number of wires:                 33
   Number of wire bits:            414
   Number of public wires:          24
   Number of public wire bits:     405
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             2
     $logic_and                      5
     $logic_not                      1
     $mux                            1
     $ne                             1
     $reduce_bool                    1

=== rvfi_insn_c_lw ===

   Number of wires:                 34
   Number of wire bits:            514
   Number of public wires:          26
   Number of public wire bits:     413
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             1
     $logic_and                      3
     $logic_not                      2
     $mul                            1
     $reduce_bool                    1
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_c_lwsp ===

   Number of wires:                 35
   Number of wire bits:            516
   Number of public wires:          25
   Number of public wire bits:     413
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 18
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      4
     $logic_not                      1
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_c_mv ===

   Number of wires:                 31
   Number of wire bits:            386
   Number of public wires:          24
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      4
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_c_or ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             3
     $logic_and                      4
     $logic_not                      1
     $or                             1

=== rvfi_insn_c_slli ===

   Number of wires:                 32
   Number of wire bits:            387
   Number of public wires:          24
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             1
     $logic_and                      4
     $logic_not                      3
     $mux                            1
     $reduce_bool                    1
     $shl                            1

=== rvfi_insn_c_srai ===

   Number of wires:                 34
   Number of wire bits:            388
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             3
     $logic_and                      5
     $logic_not                      2
     $sshr                           1

=== rvfi_insn_c_srli ===

   Number of wires:                 34
   Number of wire bits:            388
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             2
     $logic_and                      5
     $logic_not                      3
     $shr                            1

=== rvfi_insn_c_sub ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      4
     $logic_not                      2
     $sub                            1

=== rvfi_insn_c_sw ===

   Number of wires:                 33
   Number of wire bits:            482
   Number of public wires:          25
   Number of public wire bits:     381
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             1
     $logic_and                      3
     $logic_not                      2
     $mul                            1
     $reduce_bool                    1
     $shl                            2
     $sub                            1

=== rvfi_insn_c_swsp ===

   Number of wires:                 32
   Number of wire bits:            482
   Number of public wires:          24
   Number of public wire bits:     381
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mul                            1
     $reduce_bool                    1
     $shl                            2
     $sub                            1

=== rvfi_insn_c_xor ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          25
   Number of public wire bits:     379
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             3
     $logic_and                      4
     $logic_not                      1
     $xor                            1

=== rvfi_insn_jal ===

   Number of wires:                 27
   Number of wire bits:            458
   Number of public wires:          24
   Number of public wire bits:     424
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  6
     $add                            2
     $eq                             1
     $logic_and                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_jalr ===

   Number of wires:                 32
   Number of wire bits:            500
   Number of public wires:          26
   Number of public wire bits:     432
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  9
     $add                            2
     $and                            1
     $eq                             1
     $logic_and                      2
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_lb ===

   Number of wires:                 33
   Number of wire bits:            539
   Number of public wires:          26
   Number of public wire bits:     439
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             1
     $logic_and                      2
     $logic_not                      1
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_lbu ===

   Number of wires:                 33
   Number of wire bits:            539
   Number of public wires:          26
   Number of public wire bits:     439
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_lh ===

   Number of wires:                 33
   Number of wire bits:            547
   Number of public wires:          26
   Number of public wire bits:     447
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_lhu ===

   Number of wires:                 33
   Number of wire bits:            547
   Number of public wires:          26
   Number of public wire bits:     447
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_lui ===

   Number of wires:                 24
   Number of wire bits:            393
   Number of public wires:          22
   Number of public wire bits:     391
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  5
     $add                            1
     $eq                             1
     $logic_and                      1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_lw ===

   Number of wires:                 33
   Number of wire bits:            563
   Number of public wires:          26
   Number of public wire bits:     463
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $mux                            1
     $reduce_bool                    2
     $shl                            1
     $shr                            1
     $sub                            1

=== rvfi_insn_or ===

   Number of wires:                 32
   Number of wire bits:            417
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $or                             1
     $reduce_bool                    1

=== rvfi_insn_ori ===

   Number of wires:                 29
   Number of wire bits:            435
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $eq                             2
     $logic_and                      2
     $mux                            1
     $or                             1
     $reduce_bool                    1

=== rvfi_insn_sb ===

   Number of wires:                 31
   Number of wire bits:            530
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            2
     $and                            2
     $eq                             1
     $logic_and                      2
     $logic_not                      1
     $mul                            1
     $reduce_bool                    1
     $shl                            2
     $sub                            1

=== rvfi_insn_sh ===

   Number of wires:                 31
   Number of wire bits:            530
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $reduce_bool                    1
     $shl                            2
     $sub                            1

=== rvfi_insn_sll ===

   Number of wires:                 33
   Number of wire bits:            422
   Number of public wires:          27
   Number of public wire bits:     416
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1
     $shl                            1

=== rvfi_insn_slli ===

   Number of wires:                 34
   Number of wire bits:            419
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             2
     $logic_and                      4
     $logic_not                      2
     $mux                            1
     $reduce_bool                    1
     $shl                            1

=== rvfi_insn_slt ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          26
   Number of public wire bits:     380
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $lt                             1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_slti ===

   Number of wires:                 29
   Number of wire bits:            404
   Number of public wires:          25
   Number of public wire bits:     400
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $eq                             2
     $logic_and                      2
     $lt                             1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_sltiu ===

   Number of wires:                 29
   Number of wire bits:            404
   Number of public wires:          25
   Number of public wire bits:     400
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $eq                             2
     $logic_and                      2
     $lt                             1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_sltu ===

   Number of wires:                 32
   Number of wire bits:            386
   Number of public wires:          26
   Number of public wire bits:     380
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $lt                             1
     $mux                            1
     $reduce_bool                    1

=== rvfi_insn_sra ===

   Number of wires:                 33
   Number of wire bits:            422
   Number of public wires:          27
   Number of public wire bits:     416
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             3
     $logic_and                      3
     $mux                            1
     $reduce_bool                    1
     $sshr                           1

=== rvfi_insn_srai ===

   Number of wires:                 34
   Number of wire bits:            419
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             3
     $logic_and                      4
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1
     $sshr                           1

=== rvfi_insn_srl ===

   Number of wires:                 33
   Number of wire bits:            422
   Number of public wires:          27
   Number of public wire bits:     416
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1
     $shr                            1

=== rvfi_insn_srli ===

   Number of wires:                 34
   Number of wire bits:            419
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 12
     $add                            1
     $eq                             2
     $logic_and                      4
     $logic_not                      2
     $mux                            1
     $reduce_bool                    1
     $shr                            1

=== rvfi_insn_sub ===

   Number of wires:                 32
   Number of wire bits:            417
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1
     $sub                            1

=== rvfi_insn_sw ===

   Number of wires:                 31
   Number of wire bits:            530
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 13
     $add                            2
     $and                            2
     $eq                             2
     $logic_and                      2
     $mul                            1
     $reduce_bool                    1
     $shl                            2
     $sub                            1

=== rvfi_insn_xor ===

   Number of wires:                 32
   Number of wire bits:            417
   Number of public wires:          26
   Number of public wire bits:     411
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 10
     $add                            1
     $eq                             2
     $logic_and                      3
     $logic_not                      1
     $mux                            1
     $reduce_bool                    1
     $xor                            1

=== rvfi_insn_xori ===

   Number of wires:                 29
   Number of wire bits:            435
   Number of public wires:          25
   Number of public wire bits:     431
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                  8
     $add                            1
     $eq                             2
     $logic_and                      2
     $mux                            1
     $reduce_bool                    1
     $xor                            1

=== rvfi_isa_rv32ic ===

   Number of wires:               1370
   Number of wire bits:          31272
   Number of public wires:         699
   Number of public wire bits:    9800
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                744
     $mux                          682
     rvfi_insn_add                   1
     rvfi_insn_addi                  1
     rvfi_insn_and                   1
     rvfi_insn_andi                  1
     rvfi_insn_auipc                 1
     rvfi_insn_beq                   1
     rvfi_insn_bge                   1
     rvfi_insn_bgeu                  1
     rvfi_insn_blt                   1
     rvfi_insn_bltu                  1
     rvfi_insn_bne                   1
     rvfi_insn_c_add                 1
     rvfi_insn_c_addi                1
     rvfi_insn_c_addi16sp            1
     rvfi_insn_c_addi4spn            1
     rvfi_insn_c_and                 1
     rvfi_insn_c_andi                1
     rvfi_insn_c_beqz                1
     rvfi_insn_c_bnez                1
     rvfi_insn_c_j                   1
     rvfi_insn_c_jal                 1
     rvfi_insn_c_jalr                1
     rvfi_insn_c_jr                  1
     rvfi_insn_c_li                  1
     rvfi_insn_c_lui                 1
     rvfi_insn_c_lw                  1
     rvfi_insn_c_lwsp                1
     rvfi_insn_c_mv                  1
     rvfi_insn_c_or                  1
     rvfi_insn_c_slli                1
     rvfi_insn_c_srai                1
     rvfi_insn_c_srli                1
     rvfi_insn_c_sub                 1
     rvfi_insn_c_sw                  1
     rvfi_insn_c_swsp                1
     rvfi_insn_c_xor                 1
     rvfi_insn_jal                   1
     rvfi_insn_jalr                  1
     rvfi_insn_lb                    1
     rvfi_insn_lbu                   1
     rvfi_insn_lh                    1
     rvfi_insn_lhu                   1
     rvfi_insn_lui                   1
     rvfi_insn_lw                    1
     rvfi_insn_or                    1
     rvfi_insn_ori                   1
     rvfi_insn_sb                    1
     rvfi_insn_sh                    1
     rvfi_insn_sll                   1
     rvfi_insn_slli                  1
     rvfi_insn_slt                   1
     rvfi_insn_slti                  1
     rvfi_insn_sltiu                 1
     rvfi_insn_sltu                  1
     rvfi_insn_sra                   1
     rvfi_insn_srai                  1
     rvfi_insn_srl                   1
     rvfi_insn_srli                  1
     rvfi_insn_sub                   1
     rvfi_insn_sw                    1
     rvfi_insn_xor                   1
     rvfi_insn_xori                  1

=== testbench ===

   Number of wires:                 51
   Number of wire bits:            713
   Number of public wires:          40
   Number of public wire bits:     702
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 15
     $assert                         1
     $dff                            1
     $logic_and                      3
     $logic_not                      3
     $mux                            4
     $ne                             1
     myRiscv                         1
     rvfi_isa_rv32ic                 1

=== design hierarchy ===

   testbench                         1
     myRiscv                         1
     rvfi_isa_rv32ic                 1
       rvfi_insn_add                 1
       rvfi_insn_addi                1
       rvfi_insn_and                 1
       rvfi_insn_andi                1
       rvfi_insn_auipc               1
       rvfi_insn_beq                 1
       rvfi_insn_bge                 1
       rvfi_insn_bgeu                1
       rvfi_insn_blt                 1
       rvfi_insn_bltu                1
       rvfi_insn_bne                 1
       rvfi_insn_c_add               1
       rvfi_insn_c_addi              1
       rvfi_insn_c_addi16sp          1
       rvfi_insn_c_addi4spn          1
       rvfi_insn_c_and               1
       rvfi_insn_c_andi              1
       rvfi_insn_c_beqz              1
       rvfi_insn_c_bnez              1
       rvfi_insn_c_j                 1
       rvfi_insn_c_jal               1
       rvfi_insn_c_jalr              1
       rvfi_insn_c_jr                1
       rvfi_insn_c_li                1
       rvfi_insn_c_lui               1
       rvfi_insn_c_lw                1
       rvfi_insn_c_lwsp              1
       rvfi_insn_c_mv                1
       rvfi_insn_c_or                1
       rvfi_insn_c_slli              1
       rvfi_insn_c_srai              1
       rvfi_insn_c_srli              1
       rvfi_insn_c_sub               1
       rvfi_insn_c_sw                1
       rvfi_insn_c_swsp              1
       rvfi_insn_c_xor               1
       rvfi_insn_jal                 1
       rvfi_insn_jalr                1
       rvfi_insn_lb                  1
       rvfi_insn_lbu                 1
       rvfi_insn_lh                  1
       rvfi_insn_lhu                 1
       rvfi_insn_lui                 1
       rvfi_insn_lw                  1
       rvfi_insn_or                  1
       rvfi_insn_ori                 1
       rvfi_insn_sb                  1
       rvfi_insn_sh                  1
       rvfi_insn_sll                 1
       rvfi_insn_slli                1
       rvfi_insn_slt                 1
       rvfi_insn_slti                1
       rvfi_insn_sltiu               1
       rvfi_insn_sltu                1
       rvfi_insn_sra                 1
       rvfi_insn_srai                1
       rvfi_insn_srl                 1
       rvfi_insn_srli                1
       rvfi_insn_sub                 1
       rvfi_insn_sw                  1
       rvfi_insn_xor                 1
       rvfi_insn_xori                1

   Number of wires:               3613
   Number of wire bits:          61539
   Number of public wires:        2363
   Number of public wire bits:   36908
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:               1552
     $add                           95
     $and                           36
     $assert                         1
     $dff                            4
     $eq                           156
     $ge                             2
     $logic_and                    193
     $logic_not                     72
     $logic_or                       8
     $lt                             8
     $mem_v2                         1
     $mul                           12
     $mux                          815
     $ne                             6
     $not                            5
     $or                             5
     $pmux                          17
     $reduce_bool                   54
     $reduce_or                      2
     $shl                           21
     $shr                           11
     $sshr                           4
     $sub                           15
     $xor                            9

67.12. Executing CHECK pass (checking for obvious problems).
Checking module myRiscv...
Checking module rvfi_insn_add...
Checking module rvfi_insn_addi...
Checking module rvfi_insn_and...
Checking module rvfi_insn_andi...
Checking module rvfi_insn_auipc...
Checking module rvfi_insn_beq...
Checking module rvfi_insn_bge...
Checking module rvfi_insn_bgeu...
Checking module rvfi_insn_blt...
Checking module rvfi_insn_bltu...
Checking module rvfi_insn_bne...
Checking module rvfi_insn_c_add...
Checking module rvfi_insn_c_addi...
Checking module rvfi_insn_c_addi16sp...
Checking module rvfi_insn_c_addi4spn...
Checking module rvfi_insn_c_and...
Checking module rvfi_insn_c_andi...
Checking module rvfi_insn_c_beqz...
Checking module rvfi_insn_c_bnez...
Checking module rvfi_insn_c_j...
Checking module rvfi_insn_c_jal...
Checking module rvfi_insn_c_jalr...
Checking module rvfi_insn_c_jr...
Checking module rvfi_insn_c_li...
Checking module rvfi_insn_c_lui...
Checking module rvfi_insn_c_lw...
Checking module rvfi_insn_c_lwsp...
Checking module rvfi_insn_c_mv...
Checking module rvfi_insn_c_or...
Checking module rvfi_insn_c_slli...
Checking module rvfi_insn_c_srai...
Checking module rvfi_insn_c_srli...
Checking module rvfi_insn_c_sub...
Checking module rvfi_insn_c_sw...
Checking module rvfi_insn_c_swsp...
Checking module rvfi_insn_c_xor...
Checking module rvfi_insn_jal...
Checking module rvfi_insn_jalr...
Checking module rvfi_insn_lb...
Checking module rvfi_insn_lbu...
Checking module rvfi_insn_lh...
Checking module rvfi_insn_lhu...
Checking module rvfi_insn_lui...
Checking module rvfi_insn_lw...
Checking module rvfi_insn_or...
Checking module rvfi_insn_ori...
Checking module rvfi_insn_sb...
Checking module rvfi_insn_sh...
Checking module rvfi_insn_sll...
Checking module rvfi_insn_slli...
Checking module rvfi_insn_slt...
Checking module rvfi_insn_slti...
Checking module rvfi_insn_sltiu...
Checking module rvfi_insn_sltu...
Checking module rvfi_insn_sra...
Checking module rvfi_insn_srai...
Checking module rvfi_insn_srl...
Checking module rvfi_insn_srli...
Checking module rvfi_insn_sub...
Checking module rvfi_insn_sw...
Checking module rvfi_insn_xor...
Checking module rvfi_insn_xori...
Checking module rvfi_isa_rv32ic...
Checking module testbench...
Found and reported 0 problems.

68. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).
Mapping memory \mem in module \myRiscv:
  created 32 $dff cells and 0 static cells of width 32.
  read interface: 0 $dff and 93 $mux cells.
  write interface: 64 write mux blocks.

69. Executing ASYNC2SYNC pass.

70. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..
Removed 0 unused cells and 128 unused wires.
<suppressed ~1 debug messages>

71. Executing SETUNDEF pass (replace undef values with defined constants).

72. Executing OPT pass (performing simple optimizations).

72.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
<suppressed ~20 debug messages>
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

72.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
Finding identical cells in module `\rvfi_insn_c_lwsp'.
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
Finding identical cells in module `\rvfi_insn_c_swsp'.
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
Finding identical cells in module `\rvfi_insn_lbu'.
Finding identical cells in module `\rvfi_insn_lh'.
Finding identical cells in module `\rvfi_insn_lhu'.
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
Finding identical cells in module `\rvfi_insn_sh'.
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

72.3. Executing OPT_DFF pass (perform DFF optimizations).
Adding SRST signal on $procdff$3845 ($dff) from module myRiscv (D = $add$myRiscv.sv:129$16_Y, Q = \instr_index, rval = 64'0000000000000000000000000000000000000000000000000000000000000000).
Adding SRST signal on $procdff$3844 ($dff) from module myRiscv (D = \pc, Q = \pc_last, rval = 0).
Adding SRST signal on $procdff$3843 ($dff) from module myRiscv (D = \pc_next, Q = \pc, rval = 0).
Adding EN signal on $memory\mem[9]$4084 ($dff) from module myRiscv (D = $memory\mem$wrmux[9][1][0]$y$4600, Q = \mem[9]).
Adding EN signal on $memory\mem[8]$4082 ($dff) from module myRiscv (D = $memory\mem$wrmux[8][1][0]$y$4588, Q = \mem[8]).
Adding EN signal on $memory\mem[7]$4080 ($dff) from module myRiscv (D = $memory\mem$wrmux[7][1][0]$y$4564, Q = \mem[7]).
Adding EN signal on $memory\mem[6]$4078 ($dff) from module myRiscv (D = $memory\mem$wrmux[6][1][0]$y$4552, Q = \mem[6]).
Adding EN signal on $memory\mem[5]$4076 ($dff) from module myRiscv (D = $memory\mem$wrmux[5][1][0]$y$4540, Q = \mem[5]).
Adding EN signal on $memory\mem[4]$4074 ($dff) from module myRiscv (D = $memory\mem$wrmux[4][1][0]$y$4528, Q = \mem[4]).
Adding EN signal on $memory\mem[3]$4072 ($dff) from module myRiscv (D = $memory\mem$wrmux[3][1][0]$y$4508, Q = \mem[3]).
Adding EN signal on $memory\mem[31]$4128 ($dff) from module myRiscv (D = $memory\mem$wrmux[31][1][0]$y$4896, Q = \mem[31]).
Adding EN signal on $memory\mem[30]$4126 ($dff) from module myRiscv (D = $memory\mem$wrmux[30][1][0]$y$4884, Q = \mem[30]).
Adding EN signal on $memory\mem[2]$4070 ($dff) from module myRiscv (D = $memory\mem$wrmux[2][1][0]$y$4492, Q = \mem[2]).
Adding EN signal on $memory\mem[29]$4124 ($dff) from module myRiscv (D = $memory\mem$wrmux[29][1][0]$y$4872, Q = \mem[29]).
Adding EN signal on $memory\mem[28]$4122 ($dff) from module myRiscv (D = $memory\mem$wrmux[28][1][0]$y$4860, Q = \mem[28]).
Adding EN signal on $memory\mem[27]$4120 ($dff) from module myRiscv (D = $memory\mem$wrmux[27][1][0]$y$4844, Q = \mem[27]).
Adding EN signal on $memory\mem[26]$4118 ($dff) from module myRiscv (D = $memory\mem$wrmux[26][1][0]$y$4832, Q = \mem[26]).
Adding EN signal on $memory\mem[25]$4116 ($dff) from module myRiscv (D = $memory\mem$wrmux[25][1][0]$y$4820, Q = \mem[25]).
Adding EN signal on $memory\mem[24]$4114 ($dff) from module myRiscv (D = $memory\mem$wrmux[24][1][0]$y$4808, Q = \mem[24]).
Adding EN signal on $memory\mem[23]$4112 ($dff) from module myRiscv (D = $memory\mem$wrmux[23][1][0]$y$4788, Q = \mem[23]).
Adding EN signal on $memory\mem[22]$4110 ($dff) from module myRiscv (D = $memory\mem$wrmux[22][1][0]$y$4776, Q = \mem[22]).
Adding EN signal on $memory\mem[21]$4108 ($dff) from module myRiscv (D = $memory\mem$wrmux[21][1][0]$y$4764, Q = \mem[21]).
Adding EN signal on $memory\mem[20]$4106 ($dff) from module myRiscv (D = $memory\mem$wrmux[20][1][0]$y$4752, Q = \mem[20]).
Adding EN signal on $memory\mem[1]$4068 ($dff) from module myRiscv (D = $memory\mem$wrmux[1][1][0]$y$4472, Q = \mem[1]).
Adding EN signal on $memory\mem[19]$4104 ($dff) from module myRiscv (D = $memory\mem$wrmux[19][1][0]$y$4736, Q = \mem[19]).
Adding EN signal on $memory\mem[18]$4102 ($dff) from module myRiscv (D = $memory\mem$wrmux[18][1][0]$y$4724, Q = \mem[18]).
Adding EN signal on $memory\mem[17]$4100 ($dff) from module myRiscv (D = $memory\mem$wrmux[17][1][0]$y$4712, Q = \mem[17]).
Adding EN signal on $memory\mem[16]$4098 ($dff) from module myRiscv (D = $memory\mem$wrmux[16][1][0]$y$4700, Q = \mem[16]).
Adding EN signal on $memory\mem[15]$4096 ($dff) from module myRiscv (D = $memory\mem$wrmux[15][1][0]$y$4676, Q = \mem[15]).
Adding EN signal on $memory\mem[14]$4094 ($dff) from module myRiscv (D = $memory\mem$wrmux[14][1][0]$y$4664, Q = \mem[14]).
Adding EN signal on $memory\mem[13]$4092 ($dff) from module myRiscv (D = $memory\mem$wrmux[13][1][0]$y$4652, Q = \mem[13]).
Adding EN signal on $memory\mem[12]$4090 ($dff) from module myRiscv (D = $memory\mem$wrmux[12][1][0]$y$4640, Q = \mem[12]).
Adding EN signal on $memory\mem[11]$4088 ($dff) from module myRiscv (D = $memory\mem$wrmux[11][1][0]$y$4624, Q = \mem[11]).
Adding EN signal on $memory\mem[10]$4086 ($dff) from module myRiscv (D = $memory\mem$wrmux[10][1][0]$y$4612, Q = \mem[10]).
Adding EN signal on $memory\mem[0]$4066 ($dff) from module myRiscv (D = $memory\mem$wrmux[0][1][0]$y$4452, Q = \mem[0]).

72.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..
Removed 3 unused cells and 13 unused wires.
<suppressed ~4 debug messages>

72.5. Rerunning OPT passes. (Removed registers in this run.)

72.6. Executing OPT_EXPR pass (perform const folding).
Optimizing module myRiscv.
<suppressed ~32 debug messages>
Optimizing module rvfi_insn_add.
Optimizing module rvfi_insn_addi.
Optimizing module rvfi_insn_and.
Optimizing module rvfi_insn_andi.
Optimizing module rvfi_insn_auipc.
Optimizing module rvfi_insn_beq.
Optimizing module rvfi_insn_bge.
Optimizing module rvfi_insn_bgeu.
Optimizing module rvfi_insn_blt.
Optimizing module rvfi_insn_bltu.
Optimizing module rvfi_insn_bne.
Optimizing module rvfi_insn_c_add.
Optimizing module rvfi_insn_c_addi.
Optimizing module rvfi_insn_c_addi16sp.
Optimizing module rvfi_insn_c_addi4spn.
Optimizing module rvfi_insn_c_and.
Optimizing module rvfi_insn_c_andi.
Optimizing module rvfi_insn_c_beqz.
Optimizing module rvfi_insn_c_bnez.
Optimizing module rvfi_insn_c_j.
Optimizing module rvfi_insn_c_jal.
Optimizing module rvfi_insn_c_jalr.
Optimizing module rvfi_insn_c_jr.
Optimizing module rvfi_insn_c_li.
Optimizing module rvfi_insn_c_lui.
Optimizing module rvfi_insn_c_lw.
Optimizing module rvfi_insn_c_lwsp.
Optimizing module rvfi_insn_c_mv.
Optimizing module rvfi_insn_c_or.
Optimizing module rvfi_insn_c_slli.
Optimizing module rvfi_insn_c_srai.
Optimizing module rvfi_insn_c_srli.
Optimizing module rvfi_insn_c_sub.
Optimizing module rvfi_insn_c_sw.
Optimizing module rvfi_insn_c_swsp.
Optimizing module rvfi_insn_c_xor.
Optimizing module rvfi_insn_jal.
Optimizing module rvfi_insn_jalr.
Optimizing module rvfi_insn_lb.
Optimizing module rvfi_insn_lbu.
Optimizing module rvfi_insn_lh.
Optimizing module rvfi_insn_lhu.
Optimizing module rvfi_insn_lui.
Optimizing module rvfi_insn_lw.
Optimizing module rvfi_insn_or.
Optimizing module rvfi_insn_ori.
Optimizing module rvfi_insn_sb.
Optimizing module rvfi_insn_sh.
Optimizing module rvfi_insn_sll.
Optimizing module rvfi_insn_slli.
Optimizing module rvfi_insn_slt.
Optimizing module rvfi_insn_slti.
Optimizing module rvfi_insn_sltiu.
Optimizing module rvfi_insn_sltu.
Optimizing module rvfi_insn_sra.
Optimizing module rvfi_insn_srai.
Optimizing module rvfi_insn_srl.
Optimizing module rvfi_insn_srli.
Optimizing module rvfi_insn_sub.
Optimizing module rvfi_insn_sw.
Optimizing module rvfi_insn_xor.
Optimizing module rvfi_insn_xori.
Optimizing module rvfi_isa_rv32ic.
Optimizing module testbench.

72.7. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\myRiscv'.
Finding identical cells in module `\rvfi_insn_add'.
Finding identical cells in module `\rvfi_insn_addi'.
Finding identical cells in module `\rvfi_insn_and'.
Finding identical cells in module `\rvfi_insn_andi'.
Finding identical cells in module `\rvfi_insn_auipc'.
Finding identical cells in module `\rvfi_insn_beq'.
Finding identical cells in module `\rvfi_insn_bge'.
Finding identical cells in module `\rvfi_insn_bgeu'.
Finding identical cells in module `\rvfi_insn_blt'.
Finding identical cells in module `\rvfi_insn_bltu'.
Finding identical cells in module `\rvfi_insn_bne'.
Finding identical cells in module `\rvfi_insn_c_add'.
Finding identical cells in module `\rvfi_insn_c_addi'.
Finding identical cells in module `\rvfi_insn_c_addi16sp'.
Finding identical cells in module `\rvfi_insn_c_addi4spn'.
Finding identical cells in module `\rvfi_insn_c_and'.
Finding identical cells in module `\rvfi_insn_c_andi'.
Finding identical cells in module `\rvfi_insn_c_beqz'.
Finding identical cells in module `\rvfi_insn_c_bnez'.
Finding identical cells in module `\rvfi_insn_c_j'.
Finding identical cells in module `\rvfi_insn_c_jal'.
Finding identical cells in module `\rvfi_insn_c_jalr'.
Finding identical cells in module `\rvfi_insn_c_jr'.
Finding identical cells in module `\rvfi_insn_c_li'.
Finding identical cells in module `\rvfi_insn_c_lui'.
Finding identical cells in module `\rvfi_insn_c_lw'.
Finding identical cells in module `\rvfi_insn_c_lwsp'.
Finding identical cells in module `\rvfi_insn_c_mv'.
Finding identical cells in module `\rvfi_insn_c_or'.
Finding identical cells in module `\rvfi_insn_c_slli'.
Finding identical cells in module `\rvfi_insn_c_srai'.
Finding identical cells in module `\rvfi_insn_c_srli'.
Finding identical cells in module `\rvfi_insn_c_sub'.
Finding identical cells in module `\rvfi_insn_c_sw'.
Finding identical cells in module `\rvfi_insn_c_swsp'.
Finding identical cells in module `\rvfi_insn_c_xor'.
Finding identical cells in module `\rvfi_insn_jal'.
Finding identical cells in module `\rvfi_insn_jalr'.
Finding identical cells in module `\rvfi_insn_lb'.
Finding identical cells in module `\rvfi_insn_lbu'.
Finding identical cells in module `\rvfi_insn_lh'.
Finding identical cells in module `\rvfi_insn_lhu'.
Finding identical cells in module `\rvfi_insn_lui'.
Finding identical cells in module `\rvfi_insn_lw'.
Finding identical cells in module `\rvfi_insn_or'.
Finding identical cells in module `\rvfi_insn_ori'.
Finding identical cells in module `\rvfi_insn_sb'.
Finding identical cells in module `\rvfi_insn_sh'.
Finding identical cells in module `\rvfi_insn_sll'.
Finding identical cells in module `\rvfi_insn_slli'.
Finding identical cells in module `\rvfi_insn_slt'.
Finding identical cells in module `\rvfi_insn_slti'.
Finding identical cells in module `\rvfi_insn_sltiu'.
Finding identical cells in module `\rvfi_insn_sltu'.
Finding identical cells in module `\rvfi_insn_sra'.
Finding identical cells in module `\rvfi_insn_srai'.
Finding identical cells in module `\rvfi_insn_srl'.
Finding identical cells in module `\rvfi_insn_srli'.
Finding identical cells in module `\rvfi_insn_sub'.
Finding identical cells in module `\rvfi_insn_sw'.
Finding identical cells in module `\rvfi_insn_xor'.
Finding identical cells in module `\rvfi_insn_xori'.
Finding identical cells in module `\rvfi_isa_rv32ic'.
Finding identical cells in module `\testbench'.
Removed a total of 0 cells.

72.8. Executing OPT_DFF pass (perform DFF optimizations).

72.9. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \myRiscv..
Finding unused cells or wires in module \rvfi_insn_add..
Finding unused cells or wires in module \rvfi_insn_addi..
Finding unused cells or wires in module \rvfi_insn_and..
Finding unused cells or wires in module \rvfi_insn_andi..
Finding unused cells or wires in module \rvfi_insn_auipc..
Finding unused cells or wires in module \rvfi_insn_beq..
Finding unused cells or wires in module \rvfi_insn_bge..
Finding unused cells or wires in module \rvfi_insn_bgeu..
Finding unused cells or wires in module \rvfi_insn_blt..
Finding unused cells or wires in module \rvfi_insn_bltu..
Finding unused cells or wires in module \rvfi_insn_bne..
Finding unused cells or wires in module \rvfi_insn_c_add..
Finding unused cells or wires in module \rvfi_insn_c_addi..
Finding unused cells or wires in module \rvfi_insn_c_addi16sp..
Finding unused cells or wires in module \rvfi_insn_c_addi4spn..
Finding unused cells or wires in module \rvfi_insn_c_and..
Finding unused cells or wires in module \rvfi_insn_c_andi..
Finding unused cells or wires in module \rvfi_insn_c_beqz..
Finding unused cells or wires in module \rvfi_insn_c_bnez..
Finding unused cells or wires in module \rvfi_insn_c_j..
Finding unused cells or wires in module \rvfi_insn_c_jal..
Finding unused cells or wires in module \rvfi_insn_c_jalr..
Finding unused cells or wires in module \rvfi_insn_c_jr..
Finding unused cells or wires in module \rvfi_insn_c_li..
Finding unused cells or wires in module \rvfi_insn_c_lui..
Finding unused cells or wires in module \rvfi_insn_c_lw..
Finding unused cells or wires in module \rvfi_insn_c_lwsp..
Finding unused cells or wires in module \rvfi_insn_c_mv..
Finding unused cells or wires in module \rvfi_insn_c_or..
Finding unused cells or wires in module \rvfi_insn_c_slli..
Finding unused cells or wires in module \rvfi_insn_c_srai..
Finding unused cells or wires in module \rvfi_insn_c_srli..
Finding unused cells or wires in module \rvfi_insn_c_sub..
Finding unused cells or wires in module \rvfi_insn_c_sw..
Finding unused cells or wires in module \rvfi_insn_c_swsp..
Finding unused cells or wires in module \rvfi_insn_c_xor..
Finding unused cells or wires in module \rvfi_insn_jal..
Finding unused cells or wires in module \rvfi_insn_jalr..
Finding unused cells or wires in module \rvfi_insn_lb..
Finding unused cells or wires in module \rvfi_insn_lbu..
Finding unused cells or wires in module \rvfi_insn_lh..
Finding unused cells or wires in module \rvfi_insn_lhu..
Finding unused cells or wires in module \rvfi_insn_lui..
Finding unused cells or wires in module \rvfi_insn_lw..
Finding unused cells or wires in module \rvfi_insn_or..
Finding unused cells or wires in module \rvfi_insn_ori..
Finding unused cells or wires in module \rvfi_insn_sb..
Finding unused cells or wires in module \rvfi_insn_sh..
Finding unused cells or wires in module \rvfi_insn_sll..
Finding unused cells or wires in module \rvfi_insn_slli..
Finding unused cells or wires in module \rvfi_insn_slt..
Finding unused cells or wires in module \rvfi_insn_slti..
Finding unused cells or wires in module \rvfi_insn_sltiu..
Finding unused cells or wires in module \rvfi_insn_sltu..
Finding unused cells or wires in module \rvfi_insn_sra..
Finding unused cells or wires in module \rvfi_insn_srai..
Finding unused cells or wires in module \rvfi_insn_srl..
Finding unused cells or wires in module \rvfi_insn_srli..
Finding unused cells or wires in module \rvfi_insn_sub..
Finding unused cells or wires in module \rvfi_insn_sw..
Finding unused cells or wires in module \rvfi_insn_xor..
Finding unused cells or wires in module \rvfi_insn_xori..
Finding unused cells or wires in module \rvfi_isa_rv32ic..
Finding unused cells or wires in module \testbench..

72.10. Finished fast OPT passes.

73. Executing CHECK pass (checking for obvious problems).
Checking module myRiscv...
Checking module rvfi_insn_add...
Checking module rvfi_insn_addi...
Checking module rvfi_insn_and...
Checking module rvfi_insn_andi...
Checking module rvfi_insn_auipc...
Checking module rvfi_insn_beq...
Checking module rvfi_insn_bge...
Checking module rvfi_insn_bgeu...
Checking module rvfi_insn_blt...
Checking module rvfi_insn_bltu...
Checking module rvfi_insn_bne...
Checking module rvfi_insn_c_add...
Checking module rvfi_insn_c_addi...
Checking module rvfi_insn_c_addi16sp...
Checking module rvfi_insn_c_addi4spn...
Checking module rvfi_insn_c_and...
Checking module rvfi_insn_c_andi...
Checking module rvfi_insn_c_beqz...
Checking module rvfi_insn_c_bnez...
Checking module rvfi_insn_c_j...
Checking module rvfi_insn_c_jal...
Checking module rvfi_insn_c_jalr...
Checking module rvfi_insn_c_jr...
Checking module rvfi_insn_c_li...
Checking module rvfi_insn_c_lui...
Checking module rvfi_insn_c_lw...
Checking module rvfi_insn_c_lwsp...
Checking module rvfi_insn_c_mv...
Checking module rvfi_insn_c_or...
Checking module rvfi_insn_c_slli...
Checking module rvfi_insn_c_srai...
Checking module rvfi_insn_c_srli...
Checking module rvfi_insn_c_sub...
Checking module rvfi_insn_c_sw...
Checking module rvfi_insn_c_swsp...
Checking module rvfi_insn_c_xor...
Checking module rvfi_insn_jal...
Checking module rvfi_insn_jalr...
Checking module rvfi_insn_lb...
Checking module rvfi_insn_lbu...
Checking module rvfi_insn_lh...
Checking module rvfi_insn_lhu...
Checking module rvfi_insn_lui...
Checking module rvfi_insn_lw...
Checking module rvfi_insn_or...
Checking module rvfi_insn_ori...
Checking module rvfi_insn_sb...
Checking module rvfi_insn_sh...
Checking module rvfi_insn_sll...
Checking module rvfi_insn_slli...
Checking module rvfi_insn_slt...
Checking module rvfi_insn_slti...
Checking module rvfi_insn_sltiu...
Checking module rvfi_insn_sltu...
Checking module rvfi_insn_sra...
Checking module rvfi_insn_srai...
Checking module rvfi_insn_srl...
Checking module rvfi_insn_srli...
Checking module rvfi_insn_sub...
Checking module rvfi_insn_sw...
Checking module rvfi_insn_xor...
Checking module rvfi_insn_xori...
Checking module rvfi_isa_rv32ic...
Checking module testbench...
Found and reported 0 problems.

74. Executing HIERARCHY pass (managing design hierarchy).

74.1. Analyzing design hierarchy..
Top module:  \testbench
Used module:     \rvfi_isa_rv32ic
Used module:         \rvfi_insn_add
Used module:         \rvfi_insn_addi
Used module:         \rvfi_insn_and
Used module:         \rvfi_insn_andi
Used module:         \rvfi_insn_auipc
Used module:         \rvfi_insn_beq
Used module:         \rvfi_insn_bge
Used module:         \rvfi_insn_bgeu
Used module:         \rvfi_insn_blt
Used module:         \rvfi_insn_bltu
Used module:         \rvfi_insn_bne
Used module:         \rvfi_insn_c_add
Used module:         \rvfi_insn_c_addi
Used module:         \rvfi_insn_c_addi16sp
Used module:         \rvfi_insn_c_addi4spn
Used module:         \rvfi_insn_c_and
Used module:         \rvfi_insn_c_andi
Used module:         \rvfi_insn_c_beqz
Used module:         \rvfi_insn_c_bnez
Used module:         \rvfi_insn_c_j
Used module:         \rvfi_insn_c_jal
Used module:         \rvfi_insn_c_jalr
Used module:         \rvfi_insn_c_jr
Used module:         \rvfi_insn_c_li
Used module:         \rvfi_insn_c_lui
Used module:         \rvfi_insn_c_lw
Used module:         \rvfi_insn_c_lwsp
Used module:         \rvfi_insn_c_mv
Used module:         \rvfi_insn_c_or
Used module:         \rvfi_insn_c_slli
Used module:         \rvfi_insn_c_srai
Used module:         \rvfi_insn_c_srli
Used module:         \rvfi_insn_c_sub
Used module:         \rvfi_insn_c_sw
Used module:         \rvfi_insn_c_swsp
Used module:         \rvfi_insn_c_xor
Used module:         \rvfi_insn_jal
Used module:         \rvfi_insn_jalr
Used module:         \rvfi_insn_lb
Used module:         \rvfi_insn_lbu
Used module:         \rvfi_insn_lh
Used module:         \rvfi_insn_lhu
Used module:         \rvfi_insn_lui
Used module:         \rvfi_insn_lw
Used module:         \rvfi_insn_or
Used module:         \rvfi_insn_ori
Used module:         \rvfi_insn_sb
Used module:         \rvfi_insn_sh
Used module:         \rvfi_insn_sll
Used module:         \rvfi_insn_slli
Used module:         \rvfi_insn_slt
Used module:         \rvfi_insn_slti
Used module:         \rvfi_insn_sltiu
Used module:         \rvfi_insn_sltu
Used module:         \rvfi_insn_sra
Used module:         \rvfi_insn_srai
Used module:         \rvfi_insn_srl
Used module:         \rvfi_insn_srli
Used module:         \rvfi_insn_sub
Used module:         \rvfi_insn_sw
Used module:         \rvfi_insn_xor
Used module:         \rvfi_insn_xori
Used module:     \myRiscv

74.2. Analyzing design hierarchy..
Top module:  \testbench
Used module:     \rvfi_isa_rv32ic
Used module:         \rvfi_insn_add
Used module:         \rvfi_insn_addi
Used module:         \rvfi_insn_and
Used module:         \rvfi_insn_andi
Used module:         \rvfi_insn_auipc
Used module:         \rvfi_insn_beq
Used module:         \rvfi_insn_bge
Used module:         \rvfi_insn_bgeu
Used module:         \rvfi_insn_blt
Used module:         \rvfi_insn_bltu
Used module:         \rvfi_insn_bne
Used module:         \rvfi_insn_c_add
Used module:         \rvfi_insn_c_addi
Used module:         \rvfi_insn_c_addi16sp
Used module:         \rvfi_insn_c_addi4spn
Used module:         \rvfi_insn_c_and
Used module:         \rvfi_insn_c_andi
Used module:         \rvfi_insn_c_beqz
Used module:         \rvfi_insn_c_bnez
Used module:         \rvfi_insn_c_j
Used module:         \rvfi_insn_c_jal
Used module:         \rvfi_insn_c_jalr
Used module:         \rvfi_insn_c_jr
Used module:         \rvfi_insn_c_li
Used module:         \rvfi_insn_c_lui
Used module:         \rvfi_insn_c_lw
Used module:         \rvfi_insn_c_lwsp
Used module:         \rvfi_insn_c_mv
Used module:         \rvfi_insn_c_or
Used module:         \rvfi_insn_c_slli
Used module:         \rvfi_insn_c_srai
Used module:         \rvfi_insn_c_srli
Used module:         \rvfi_insn_c_sub
Used module:         \rvfi_insn_c_sw
Used module:         \rvfi_insn_c_swsp
Used module:         \rvfi_insn_c_xor
Used module:         \rvfi_insn_jal
Used module:         \rvfi_insn_jalr
Used module:         \rvfi_insn_lb
Used module:         \rvfi_insn_lbu
Used module:         \rvfi_insn_lh
Used module:         \rvfi_insn_lhu
Used module:         \rvfi_insn_lui
Used module:         \rvfi_insn_lw
Used module:         \rvfi_insn_or
Used module:         \rvfi_insn_ori
Used module:         \rvfi_insn_sb
Used module:         \rvfi_insn_sh
Used module:         \rvfi_insn_sll
Used module:         \rvfi_insn_slli
Used module:         \rvfi_insn_slt
Used module:         \rvfi_insn_slti
Used module:         \rvfi_insn_sltiu
Used module:         \rvfi_insn_sltu
Used module:         \rvfi_insn_sra
Used module:         \rvfi_insn_srai
Used module:         \rvfi_insn_srl
Used module:         \rvfi_insn_srli
Used module:         \rvfi_insn_sub
Used module:         \rvfi_insn_sw
Used module:         \rvfi_insn_xor
Used module:         \rvfi_insn_xori
Used module:     \myRiscv
Removed 0 unused modules.
Module testbench directly or indirectly contains formal properties -> setting "keep" attribute.

75. Executing RTLIL backend.
Output filename: ../model/design_nomem.il

Warnings: 6 unique messages, 6 total
End of script. Logfile hash: 680f294370, CPU: user 5.24s system 0.03s, MEM: 68.64 MB peak
Yosys 0.12+54 (git sha1 59a715034, clang 10.0.0-4ubuntu1 -fPIC -Os)
Time spent: 32% 3x check (1 sec), 20% 8x opt_clean (1 sec), ...
